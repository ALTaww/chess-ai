import { classNames } from "shared/lib/classNames/classNames";
import cls from "./ManualBoardEditor.module.scss";
import {
  Chessboard,
  ChessboardDnDProvider,
  SparePiece,
} from "react-chessboard";
import {
  BoardOrientation,
  Piece,
} from "react-chessboard/dist/chessboard/types";
import {
  ChangeEvent,
  InputHTMLAttributes,
  useEffect,
  useMemo,
  useState,
} from "react";
import Chess from "chess.js";
import { Button } from "shared/ui/Button/Button";
import { Input } from "shared/ui/Input/Input";
import { FenInput } from "shared/ui/FenInput/FenInput";

interface ManualBoardEditorProps {
  className?: string;
}

export const ManualBoardEditor = ({ className }: ManualBoardEditorProps) => {
  const game = useMemo(() => new Chess("8/8/8/8/8/8/8/8 w - - 0 1"), []); // –ø—É—Å—Ç–∞—è –¥–æ—Å–∫–∞
  const [boardOrientation, setBoardOrientation] = useState<"white" | "black">(
    "white"
  );
  const [boardWidth, setBoardWidth] = useState(360);
  const [fenPosition, setFenPosition] = useState<string>(game.fen());

  const handleSparePieceDrop = (piece, targetSquare) => {
    const color = piece[0];
    const type = piece[1].toLowerCase();
    const success = game.put(
      {
        type,
        color,
      },
      targetSquare
    );
    if (success) {
      setFenPosition(game.fen());
    } else {
      alert(`–ù–∞ –¥–æ—Å–∫–µ —É–∂–µ –µ—Å—Ç—å ${color === "w" ? "–±–µ–ª—ã–π" : "—á–µ—Ä–Ω—ã–π"} –ö–û–†–û–õ–¨`);
    }
    return success;
  };
  const handlePieceDrop = (sourceSquare, targetSquare, piece) => {
    const color = piece[0];
    const type = piece[1].toLowerCase();

    // —ç—Ç–æ —Ö–∞–∫, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –æ—à–∏–±–∫—É chess.js, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ https://github.com/jhlywa/chess.js/pull/426
    game.remove(sourceSquare);
    game.remove(targetSquare);
    const success = game.put(
      {
        type,
        color,
      },
      targetSquare
    );
    if (success) setFenPosition(game.fen());
    return success;
  };
  const handlePieceDropOffBoard = (sourceSquare) => {
    game.remove(sourceSquare);
    setFenPosition(game.fen());
  };
  const handleFenInputChange = (fen: string) => {
    const { valid } = game.validate_fen(fen);

    if (valid) {
      game.load(fen);
      setFenPosition(game.fen());
    } else {
      console.log("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π FEN");
    }
  };

  const pieces = [
    "wP",
    "wN",
    "wB",
    "wR",
    "wQ",
    "wK",
    "bP",
    "bN",
    "bB",
    "bR",
    "bQ",
    "bK",
  ];

  return (
    <div
      className={classNames(cls.ManualBoardEditor, {}, [className])}
      style={{
        margin: "0 auto",
        maxWidth: "60vh",
      }}
    >
      <ChessboardDnDProvider>
        <div>
          <div className={cls.piecesContainer}>
            {pieces.slice(6, 12).map((piece) => (
              <SparePiece
                key={piece}
                piece={piece as Piece}
                width={boardWidth / 8}
                dndId="ManualBoardEditor"
              />
            ))}
          </div>
          <Chessboard
            id="ManualBoardEditor"
            boardOrientation={boardOrientation}
            position={game.fen()}
            onSparePieceDrop={handleSparePieceDrop}
            onPieceDrop={handlePieceDrop}
            onPieceDropOffBoard={handlePieceDropOffBoard}
            dropOffBoardAction="trash"
            customBoardStyle={{
              borderRadius: "4px",
              boxShadow: "0 2px 10px rgba(0, 0, 0, 0.5)",
            }}
          />
          <div className={cls.piecesContainer}>
            {pieces.slice(0, 6).map((piece) => (
              <SparePiece
                key={piece}
                piece={piece as Piece}
                width={boardWidth / 8}
                dndId="ManualBoardEditor"
              />
            ))}
          </div>
        </div>
        <div
          style={{
            display: "flex",
            justifyContent: "center",
          }}
        >
          <Button
            onClick={() => {
              game.reset();
              setFenPosition(game.fen());
            }}
          >
            –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è ‚ôüÔ∏è
          </Button>
          <Button
            onClick={() => {
              game.clear();
              setFenPosition(game.fen());
            }}
          >
            –û—á–∏—Å—Ç–∏—Ç—å –¥–æ—Å–∫—É üóëÔ∏è
          </Button>
          <Button
            onClick={() => {
              setBoardOrientation(
                boardOrientation === "white" ? "black" : "white"
              );
            }}
          >
            –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –¥–æ—Å–∫—É üîÅ
          </Button>
        </div>
        <FenInput fenPosition={fenPosition} onChange={handleFenInputChange} />
        <p>–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ñ–∏–≥—É—Ä—É –∏–∑ –¥–æ—Å–∫–∏ - –≤—ã–Ω–µ—Å–∏—Ç–µ –µ—ë –∑–∞ –ø—Ä–µ–¥–µ–ª—ã</p>
        <p>–ß—Ç–æ–±—ã –ø–µ—Ä–≤—ã–º–∏ —Ö–æ–¥–∏–ª–∏ —á–µ—Ä–Ω—ã–µ - –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–º–µ–Ω–∏—Ç–µ w –Ω–∞ b</p>
      </ChessboardDnDProvider>
    </div>
  );
};

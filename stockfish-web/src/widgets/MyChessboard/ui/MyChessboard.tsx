import { classNames } from "shared/lib/classNames/classNames";
import cls from "./MyChessboard.module.scss";
import { Button, ButtonTheme } from "shared/ui/Button/Button";
import { useEffect, useMemo, useRef, useState } from "react";
import Engine, { EngineMessageCallback } from "app/stockfish/engine";
import Chess from "chess.js";
import { Chessboard } from "react-chessboard";
import { Piece, Square } from "react-chessboard/dist/chessboard/types";
import { sounds } from "shared/lib/sounds/sounds";
import { useLocation, useParams } from "react-router-dom";
import { urlParams } from "shared/config/consts/urlParams";

interface MyChessboardProps {
  className?: string;
  defaultPosition?: string;
}

interface LevelsConfig {
  text: string;
  skill: number;
  depth: number;
  thinkTime: number;
  elo?: number;
  multiPV?: number;
  threads?: number;
}

// –£—Ä–æ–≤–Ω–∏ —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
const levels: Record<string, LevelsConfig> = {
  easy: {
    text: "–õ–µ–≥–∫–æ ü§ì",
    skill: 2, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞
    // elo: 1350, // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    depth: 5, // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≥–ª—É–±–∏–Ω–∞
    thinkTime: 500, // –ú–∞–ª–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ö–æ–¥
    multiPV: 3,
  },
  normal: {
    text: "–ù–æ—Ä–º–∞–ª—å–Ω–æ üßê",
    skill: 10, // –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
    depth: 12, // –£–º–µ—Ä–µ–Ω–Ω–∞—è –≥–ª—É–±–∏–Ω–∞
    thinkTime: 1000,
    multiPV: 3, // –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
  },
  hard: {
    text: "–°–ª–æ–∂–Ω–æ üòµ",
    skill: 20, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    depth: 22, // –ì–ª—É–±–æ–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    thinkTime: 3000,
    threads: 6, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤
    multiPV: 1, // –¢–æ–ª—å–∫–æ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
  },
};

const MAX_ENGINE_THINK_TIME = 1000;
const OPENING_MOVES = 10;

export const MyChessboard = ({
  className,
  defaultPosition,
}: MyChessboardProps) => {
  const location = useLocation();
  const params = useMemo(
    () => new URLSearchParams(location.search),
    [location.search]
  );

  const game = useMemo(() => new Chess(), []);

  defaultPosition = useMemo(
    () =>
      defaultPosition ||
      params.get(urlParams.chessDefaultPosition) ||
      game.fen(),
    [defaultPosition, params, game]
  );

  const engineRef = useRef<Engine | null>(null);
  const [gamePosition, setGamePosition] = useState(
    defaultPosition || params.get(urlParams.chessDefaultPosition) || game.fen()
  );
  const [stockfishLevel, setStockfishLevel] =
    useState<keyof typeof levels>("easy");
  const [isOpening, setIsOpening] = useState(true);

  useEffect(() => {
    const engine = new Engine();
    engineRef.current = engine;

    const config = levels[stockfishLevel];

    // –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
    engine.setLimitStrength(false);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    engine.setSkillLevel(config.skill);
    engine.setDepth(config.depth);

    if (config.elo) {
      engine.setLimitStrength(true, config.elo);
    }

    if (config.threads) {
      engine.setThreads(config.threads);
    }

    if (config.multiPV) {
      engine.setMultiPV(config.multiPV);
    } else {
      engine.setMultiPV(1);
    }

    console.log(`Stockfish level set to: ${stockfishLevel}`, config);
  }, [stockfishLevel, engineRef]);

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
  useEffect(() => {
    game.load(defaultPosition);
  }, [defaultPosition, game]);

  function selectBestMove(moves: string[]): string {
    const randomness = 0.3;
    // –ß–µ–º –≤—ã—à–µ randomness, —Ç–µ–º –±–æ–ª–µ–µ —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
    const weights = moves.map((_, i) => Math.exp(-i * randomness));
    const total = weights.reduce((a, b) => a + b, 0);
    let random = Math.random() * total;

    return (
      moves.find((_, i) => {
        random -= weights[i];
        return random <= 0;
      }) || moves[0]
    );
  }

  function move(moveObj: { from: string; to: string; promotion?: string }) {
    const moved: {
      captured?: string;
      color: "w" | "b";
      from: Square;
      to: Square;
      san?: string;
      piece: Piece;
    } | null = game.move(moveObj);

    setGamePosition(game.fen());
    console.log(moved);
    if (moved === null) {
      return false;
    }

    if (game.history().length >= OPENING_MOVES) {
      setIsOpening(false);
    }

    if (game.game_over() || game.in_draw()) {
      sounds.checkmateSound.play();
      return false;
    }

    if (game.in_check()) {
      sounds.checkSound.play();
      return true;
    }

    if (moved.san === "O-O-O" || moved.san === "O-O") {
      sounds.castlingSound.play();
      return true;
    }

    if (moved.captured) {
      sounds.captureSound.play();
      return true;
    }

    sounds.moveSound.play();
    return true;
  }

  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  const handler: EngineMessageCallback = (message) => {
    console.log(message);
    console.log("Best move received:", message.bestMove);

    const engine = engineRef.current;

    const variants: string[] = [];

    if (message.pv && message.bestMove) {
      variants.push(message.bestMove);

      const selectedMove = selectBestMove(variants);

      const moveResult = move({
        from: selectedMove.substring(0, 2),
        to: selectedMove.substring(2, 4),
        promotion: selectedMove.substring(4, 5),
      });

      // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ö–æ–¥–∞
      engine.removeMessageListener(handler);

      if (!moveResult) {
        engine.stop();
      }
    }
  };

  async function findBestMove() {
    const engine = engineRef.current;
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–∞
    engine.addMessageListener(handler);
    console.log("finding best move...");

    try {
      await engine.evaluatePosition(
        game.fen(),
        isOpening ? Math.ceil(MAX_ENGINE_THINK_TIME / 2) : MAX_ENGINE_THINK_TIME
      );
    } catch (error) {
      engine.removeMessageListener(handler);
      throw error;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => engineRef.current.terminate();
  }, [engineRef]);

  function onDrop(sourceSquare: Square, targetSquare: Square, piece: Piece) {
    console.log(sourceSquare, targetSquare, piece);
    const notEnd = move({
      from: sourceSquare,
      to: targetSquare,
      promotion: piece[1].toLowerCase(),
    });

    // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ —Ö–æ–¥–∏–ª –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
    if (notEnd) {
      setTimeout(() => {
        findBestMove();
      }, 500);
    }
    return notEnd;
  }

  return (
    <div className={classNames(cls.MyChessboard, {}, [className])}>
      <div className={cls.chessboardWrapper}>
        <div className={cls.buttons}>
          {Object.entries(levels).map(([level, config]) => (
            <Button
              key={`${level}`}
              onClick={() => setStockfishLevel(level)}
              theme={ButtonTheme.CLASSIC}
              active={stockfishLevel === level}
            >
              {config.text}
            </Button>
          ))}
        </div>

        <Chessboard
          id="PlayVsStockfish"
          position={gamePosition}
          onPieceDrop={onDrop}
        />

        <div className={cls.buttons}>
          <Button
            onClick={() => {
              game.reset();
              setGamePosition(game.fen());
            }}
          >
            –ù–æ–≤–∞—è –∏–≥—Ä–∞
          </Button>
          <Button
            onClick={() => {
              game.undo();
              game.undo();
              setGamePosition(game.fen());
            }}
          >
            –ù–∞–∑–∞–¥
          </Button>
        </div>
      </div>
    </div>
  );
};

{"version":3,"file":"static/js/52.f48cbb0d.chunk.js","mappings":"qJACA,SAAiB,E,aCMV,MAAMA,EAAgBC,IAAwC,IAAvC,UAAEC,GAA+BD,EAC7D,OACEE,EAAAA,EAAAA,KAAA,OAAKD,WAAWE,EAAAA,EAAAA,GAAWC,EAAIL,cAAe,CAAC,EAAG,CAACE,IAAYI,SAAC,oEAE1D,ECGV,EARgBL,IAAkC,IAAjC,UAAEC,GAAyBD,EAC1C,OACEE,EAAAA,EAAAA,KAAA,OAAAG,UACEH,EAAAA,EAAAA,KAACH,EAAa,KACV,C","sources":["widgets/AnalysisBoard/ui/AnalysisBoard.module.scss","widgets/AnalysisBoard/ui/AnalysisBoard.tsx","pages/Analyze/ui/Analyze.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import { classNames } from \"shared/lib/classNames/classNames\";\r\nimport cls from \"./AnalysisBoard.module.scss\";\r\n\r\ninterface AnalysisBoardProps {\r\n  className?: string;\r\n}\r\n\r\nexport const AnalysisBoard = ({ className }: AnalysisBoardProps) => {\r\n  return (\r\n    <div className={classNames(cls.AnalysisBoard, {}, [className])}>\r\n      –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ...\r\n    </div>\r\n  );\r\n};\r\n\r\n// import { classNames } from \"shared/lib/classNames/classNames\";\r\n// import cls from \"./AnalysisBoard.module.scss\";\r\n// import { useEffect, useMemo, useRef, useState } from \"react\";\r\n// import Engine, { EngineMessageCallback } from \"app/stockfish/engine\";\r\n// import Chess from \"chess.js\";\r\n// import { Button } from \"shared/ui/Button/Button\";\r\n// import { Chessboard } from \"react-chessboard\";\r\n// import { Square } from \"react-chessboard/dist/chessboard/types\";\r\n\r\n// interface AnalysisBoardProps {\r\n//   className?: string;\r\n// }\r\n\r\n// interface LevelsConfig {\r\n//   text: string;\r\n//   skill: number;\r\n//   depth: number;\r\n//   thinkTime: number;\r\n//   elo?: number;\r\n//   multiPV?: number;\r\n//   threads?: number;\r\n// }\r\n\r\n// // –£—Ä–æ–≤–Ω–∏ —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\r\n// const levels: Record<string, LevelsConfig> = {\r\n//   hard: {\r\n//     text: \"–°–ª–æ–∂–Ω–æ üòµ\",\r\n//     skill: 20, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å\r\n//     depth: 22, // –ì–ª—É–±–æ–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\r\n//     thinkTime: 3000,\r\n//     threads: 6, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤\r\n//     multiPV: 1, // –¢–æ–ª—å–∫–æ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\r\n//   },\r\n// };\r\n\r\n// export const AnalysisBoard = ({ className }: AnalysisBoardProps) => {\r\n//   const engine = useMemo(() => new Engine(), []);\r\n//   const game = useMemo(() => new Chess(), []);\r\n//   const inputRef = useRef<HTMLInputElement>(null);\r\n//   const [chessBoardPosition, setChessBoardPosition] = useState(game.fen());\r\n//   const [positionEvaluation, setPositionEvaluation] = useState(0);\r\n//   const [depth, setDepth] = useState(10);\r\n//   const [bestLine, setBestline] = useState(\"\");\r\n//   const [possibleMate, setPossibleMate] = useState(\"\");\r\n\r\n//   const config: LevelsConfig = {\r\n//     text: \"–°–ª–æ–∂–Ω–æ üòµ\",\r\n//     skill: 20, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å\r\n//     depth: 22, // –ì–ª—É–±–æ–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\r\n//     thinkTime: 3000,\r\n//     threads: 6, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤\r\n//     multiPV: 1, // –¢–æ–ª—å–∫–æ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const config = levels[\"hard\"];\r\n\r\n//     // –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π\r\n//     engine.setLimitStrength(false);\r\n\r\n//     // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\r\n//     engine.setSkillLevel(config.skill);\r\n//     engine.setDepth(config.depth);\r\n\r\n//     if (config.elo) {\r\n//       engine.setLimitStrength(true, config.elo);\r\n//     }\r\n\r\n//     if (config.threads) {\r\n//       engine.setThreads(config.threads);\r\n//     }\r\n\r\n//     if (config.multiPV) {\r\n//       engine.setMultiPV(config.multiPV);\r\n//     } else {\r\n//       engine.setMultiPV(1);\r\n//     }\r\n//   }, [engine]);\r\n\r\n//   // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫\r\n//   const handler: EngineMessageCallback = (message) => {\r\n//     const { positionEvaluation, possibleMate, pv, depth } = message;\r\n\r\n//     if (depth && depth < 10) return;\r\n//     positionEvaluation &&\r\n//       setPositionEvaluation(\r\n//         ((game.turn() === \"w\" ? 1 : -1) * Number(positionEvaluation)) / 100\r\n//       );\r\n//     possibleMate && setPossibleMate(`${possibleMate}`);\r\n//     depth && setDepth(depth);\r\n//     pv && setBestline(pv);\r\n\r\n//     console.log(message);\r\n//     console.log(\"Best move received:\", message.bestMove);\r\n\r\n//     const variants: string[] = [];\r\n\r\n//     if (message.pv && message.bestMove) {\r\n//       variants.push(message.bestMove);\r\n\r\n//       const selectedMove = selectBestMove(variants);\r\n\r\n//       const moveResult = move({\r\n//         from: selectedMove.substring(0, 2),\r\n//         to: selectedMove.substring(2, 4),\r\n//         promotion: selectedMove.substring(4, 5),\r\n//       });\r\n\r\n//       // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ö–æ–¥–∞\r\n//       engine.removeMessageListener(handler);\r\n\r\n//       if (!moveResult) {\r\n//         engine.stop();\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   async function findBestMove() {\r\n//     // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–∞\r\n//     engine.addMessageListener(handler);\r\n//     console.log(\"finding best move...\");\r\n\r\n//     try {\r\n//       await engine.evaluatePosition(game.fen(), config.thinkTime);\r\n//     } catch (error) {\r\n//       engine.removeMessageListener(handler);\r\n//       throw error;\r\n//     }\r\n//   }\r\n\r\n//   // function findBestMove() {\r\n//   //   engine.evaluatePosition(chessBoardPosition, 18);\r\n//   //   engine.onMessage(({ positionEvaluation, possibleMate, pv, depth }) => {\r\n//   //     if (depth && depth < 10) return;\r\n//   //     positionEvaluation &&\r\n//   //       setPositionEvaluation(\r\n//   //         ((game.turn() === \"w\" ? 1 : -1) * Number(positionEvaluation)) / 100\r\n//   //       );\r\n//   //     possibleMate && setPossibleMate(possibleMate);\r\n//   //     depth && setDepth(depth);\r\n//   //     pv && setBestline(pv);\r\n//   //   });\r\n//   // }\r\n\r\n//   function onDrop(sourceSquare, targetSquare, piece) {\r\n//     const move = game.move({\r\n//       from: sourceSquare,\r\n//       to: targetSquare,\r\n//       promotion: piece[1].toLowerCase() ?? \"q\",\r\n//     });\r\n//     setPossibleMate(\"\");\r\n//     setChessBoardPosition(game.fen());\r\n\r\n//     // illegal move\r\n//     if (move === null) return false;\r\n//     engine.stop();\r\n//     setBestline(\"\");\r\n//     if (game.game_over() || game.in_draw()) return false;\r\n//     return true;\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     if (!game.game_over() || game.in_draw()) {\r\n//       findBestMove();\r\n//     }\r\n//   }, [chessBoardPosition]);\r\n\r\n//   const bestMove = bestLine?.split(\" \")?.[0];\r\n//   const handleFenInputChange = (e) => {\r\n//     const { valid } = game.validate_fen(e.target.value);\r\n//     if (valid && inputRef.current) {\r\n//       inputRef.current.value = e.target.value;\r\n//       game.load(e.target.value);\r\n//       setChessBoardPosition(game.fen());\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className={classNames(cls.AnalysisBoard, {}, [className])}>\r\n//       <h4>\r\n//         Position Evaluation:{\" \"}\r\n//         {possibleMate ? `#${possibleMate}` : positionEvaluation}\r\n//         {\"; \"}\r\n//         Depth: {depth}\r\n//       </h4>\r\n//       <h5>\r\n//         Best line: <i>{bestLine.slice(0, 40)}</i> ...\r\n//       </h5>\r\n//       <input\r\n//         ref={inputRef}\r\n//         style={{\r\n//           width: \"90%\",\r\n//         }}\r\n//         onChange={handleFenInputChange}\r\n//         placeholder=\"Paste FEN to start analysing custom position\"\r\n//       />\r\n//       <Chessboard\r\n//         id=\"AnalysisBoard\"\r\n//         position={chessBoardPosition}\r\n//         onPieceDrop={onDrop}\r\n//         customBoardStyle={{\r\n//           borderRadius: \"4px\",\r\n//           boxShadow: \"0 2px 10px rgba(0, 0, 0, 0.5)\",\r\n//         }}\r\n//         customArrows={\r\n//           bestMove\r\n//             ? [\r\n//                 [\r\n//                   bestMove.substring(0, 2) as Square,\r\n//                   bestMove.substring(2, 4) as Square,\r\n//                   \"rgb(0, 128, 0)\",\r\n//                 ],\r\n//               ]\r\n//             : undefined\r\n//         }\r\n//       />\r\n//       <button\r\n//         onClick={() => {\r\n//           setPossibleMate(\"\");\r\n//           setBestline(\"\");\r\n//           game.reset();\r\n//           setChessBoardPosition(game.fen());\r\n//         }}\r\n//       >\r\n//         reset\r\n//       </button>\r\n//       <Button\r\n//         onClick={() => {\r\n//           setPossibleMate(\"\");\r\n//           setBestline(\"\");\r\n//           game.undo();\r\n//           setChessBoardPosition(game.fen());\r\n//         }}\r\n//       >\r\n//         undo\r\n//       </Button>\r\n//     </div>\r\n//   );\r\n// };\r\n","import { AnalysisBoard } from \"widgets/AnalysisBoard\";\r\n\r\ninterface AnalyzeProps {\r\n  className?: string;\r\n}\r\n\r\nconst Analyze = ({ className }: AnalyzeProps) => {\r\n  return (\r\n    <div>\r\n      <AnalysisBoard />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Analyze;\r\n"],"names":["AnalysisBoard","_ref","className","_jsx","classNames","cls","children"],"sourceRoot":""}
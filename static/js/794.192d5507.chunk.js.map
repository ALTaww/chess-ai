{"version":3,"file":"static/js/794.192d5507.chunk.js","mappings":"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","sources":["shared/config/consts/urlParams.ts","shared/lib/sounds/sounds.ts","webpack://stockfish-web/./src/widgets/StockfishOnlineChessboard/ui/StockfishOnlineChessboard.module.scss?5fb4","widgets/StockfishOnlineChessboard/ui/StockfishOnlineChessboard.tsx","pages/StockfishOnline/ui/StockfishOnline.tsx"],"sourcesContent":["export const urlParams = {\r\n  chessDefaultPosition: \"board-pos\",\r\n};\r\n","const volume = 0.2;\r\n\r\nexport const sounds = {\r\n  captureSound: new Audio(\"./sound/capture.mp3\"),\r\n  castlingSound: new Audio(\"./sound/castling.mp3\"),\r\n  checkSound: new Audio(\"./sound/check.mp3\"),\r\n  checkmateSound: new Audio(\"./sound/checkmate.mp3\"),\r\n  moveSound: new Audio(\"./sound/move.mp3\"),\r\n};\r\n\r\nfor (let key of Object.keys(sounds)) {\r\n  sounds[key].volume = volume;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"StockfishOnlineChessboard\":\"StockfishOnlineChessboard_StockfishOnlineChessboard__Xm861\",\"chessboardWrapper\":\"StockfishOnlineChessboard_chessboardWrapper__LJGcy\",\"buttons\":\"StockfishOnlineChessboard_buttons__0Mnm9\"};","import { classNames } from \"shared/lib/classNames/classNames\";\r\nimport cls from \"./StockfishOnlineChessboard.module.scss\";\r\nimport { Button, ButtonTheme } from \"shared/ui/Button/Button\";\r\nimport { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport Chess from \"chess.js\";\r\nimport { Chessboard, ChessboardDnDProvider } from \"react-chessboard\";\r\nimport { Piece, Square } from \"react-chessboard/dist/chessboard/types\";\r\nimport { sounds } from \"shared/lib/sounds/sounds\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { urlParams } from \"shared/config/consts/urlParams\";\r\nimport axios from \"axios\";\r\n\r\ninterface StockfishOnlineChessboardProps {\r\n  className?: string;\r\n  defaultPosition?: string;\r\n}\r\n\r\ninterface LevelsConfig {\r\n  text: string;\r\n  depth: number;\r\n}\r\n\r\ntype BestMoveString = `bestmove ${string} ponder ${string}`;\r\n\r\ninterface ApiResponse {\r\n  success: boolean;\r\n  evaluation: number | null; // –õ–∏–±–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –ª–∏–±–æ null, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç.\r\n  mate: null | number; // (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ, –∫–æ–≥–¥–∞ –º–∞—Ç —Å—Ç–∞–≤—è—Ç –±–µ–ª—ã–µ, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ, –∫–æ–≥–¥–∞ –º–∞—Ç —Å—Ç–∞–≤—è—Ç —á–µ—Ä–Ω—ã–µ)\r\n  bestmove: BestMoveString; // –°–æ–¥–µ—Ä–∂–∏—Ç –ª—É—á—à–∏–π —Ö–æ–¥ –≤ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏\r\n  continuation: string; // –í–µ—Ä—Ö–Ω—è—è –ª–∏–Ω–∏—è –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ –ø–æ–∑–∏—Ü–∏–∏.\r\n  data?: unknown; // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ\r\n}\r\n\r\n// –£—Ä–æ–≤–Ω–∏ —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\r\nconst levels: Record<string, LevelsConfig> = {\r\n  easy: {\r\n    text: \"–õ–µ–≥–∫–æ ü§ì\",\r\n    depth: 5, // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≥–ª—É–±–∏–Ω–∞\r\n  },\r\n  normal: {\r\n    text: \"–ù–æ—Ä–º–∞–ª—å–Ω–æ üßê\",\r\n    depth: 8, // –£–º–µ—Ä–µ–Ω–Ω–∞—è –≥–ª—É–±–∏–Ω–∞\r\n  },\r\n  hard: {\r\n    text: \"–°–ª–æ–∂–Ω–æ üòµ\",\r\n    depth: 15, // –ì–ª—É–±–æ–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\r\n  },\r\n};\r\n\r\nfunction parseBestMoveLine(line: string): {\r\n  bestMove: string | null;\r\n  ponder: string | null;\r\n} {\r\n  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ bestmove\r\n  const bestMoveMatch = line.match(/^bestmove\\s+(\\S{4,6})/);\r\n  const bestMove = bestMoveMatch ? bestMoveMatch[1] : null;\r\n\r\n  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ponder (–µ—Å–ª–∏ –µ—Å—Ç—å)\r\n  const ponderMatch = line.match(/\\sponder\\s+(\\S{4,6})$/);\r\n  const ponder = ponderMatch ? ponderMatch[1] : null;\r\n\r\n  return { bestMove, ponder };\r\n}\r\n\r\nconst API_URL = \"https://stockfish.online/api/s/v2.php\";\r\nconst MOVE_DELAY = 500;\r\n\r\nexport const StockfishOnlineChessboard = ({\r\n  className,\r\n  defaultPosition,\r\n}: StockfishOnlineChessboardProps) => {\r\n  const location = useLocation();\r\n  const params = useMemo(\r\n    () => new URLSearchParams(location.search),\r\n    [location.search]\r\n  );\r\n\r\n  const game = useMemo(() => new Chess(), []);\r\n\r\n  defaultPosition = useMemo(\r\n    () =>\r\n      defaultPosition ||\r\n      params.get(urlParams.chessDefaultPosition) ||\r\n      game.fen(),\r\n    [defaultPosition, params, game]\r\n  );\r\n\r\n  const [gamePosition, setGamePosition] = useState(defaultPosition);\r\n  const [stockfishLevel, setStockfishLevel] =\r\n    useState<keyof typeof levels>(\"easy\");\r\n\r\n  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é\r\n  useEffect(() => {\r\n    game.load(defaultPosition);\r\n  }, [defaultPosition, game]);\r\n\r\n  function move(moveObj: { from: string; to: string; promotion?: string }) {\r\n    const moved: {\r\n      captured?: string;\r\n      color: \"w\" | \"b\";\r\n      from: Square;\r\n      to: Square;\r\n      san?: string;\r\n      piece: Piece;\r\n    } | null = game.move(moveObj);\r\n\r\n    setGamePosition(game.fen());\r\n    console.log(moved);\r\n    if (moved === null) {\r\n      return false;\r\n    }\r\n\r\n    if (game.game_over() || game.in_draw()) {\r\n      sounds.checkmateSound.play();\r\n      return false;\r\n    }\r\n\r\n    if (game.in_check()) {\r\n      sounds.checkSound.play();\r\n      return true;\r\n    }\r\n\r\n    if (moved.san === \"O-O-O\" || moved.san === \"O-O\") {\r\n      sounds.castlingSound.play();\r\n      return true;\r\n    }\r\n\r\n    if (moved.captured) {\r\n      sounds.captureSound.play();\r\n      return true;\r\n    }\r\n\r\n    sounds.moveSound.play();\r\n    return true;\r\n  }\r\n\r\n  async function findBestMove() {\r\n    try {\r\n      // –ü–æ —Ö–æ—Ä–æ—à–µ–º—É –µ—â—ë –¥–æ–±–∞–≤–∏—Ç—å abortController\r\n      const { data } = await axios.get<ApiResponse>(API_URL, {\r\n        params: {\r\n          fen: game.fen(),\r\n          depth: levels[stockfishLevel].depth,\r\n        },\r\n      });\r\n\r\n      console.log(data);\r\n\r\n      if (!data.success) {\r\n        console.error(data.data);\r\n        return;\r\n      }\r\n\r\n      const { bestMove, ponder } = parseBestMoveLine(data.bestmove);\r\n\r\n      console.log(bestMove, ponder);\r\n\r\n      const notEnd = move({\r\n        from: bestMove.slice(0, 2),\r\n        to: bestMove.slice(2, 4),\r\n        promotion: bestMove.slice(4, 6).toLowerCase(),\r\n      });\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  function onDrop(sourceSquare: Square, targetSquare: Square, piece: Piece) {\r\n    console.log(sourceSquare, targetSquare, piece);\r\n    const notEnd = move({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: piece[1].toLowerCase(),\r\n    });\r\n\r\n    // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ —Ö–æ–¥–∏–ª –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ\r\n    if (notEnd) {\r\n      setTimeout(() => {\r\n        findBestMove();\r\n      }, MOVE_DELAY);\r\n    }\r\n    return notEnd;\r\n  }\r\n\r\n  return (\r\n    <div className={classNames(cls.StockfishOnlineChessboard, {}, [className])}>\r\n      <div className={cls.chessboardWrapper}>\r\n        <div className={cls.buttons}>\r\n          {Object.entries(levels).map(([level, config]) => (\r\n            <Button\r\n              key={`${level}`}\r\n              onClick={() => setStockfishLevel(level)}\r\n              theme={ButtonTheme.CLASSIC}\r\n              active={stockfishLevel === level}\r\n            >\r\n              {config.text}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n\r\n        <Chessboard\r\n          id=\"chessboard\"\r\n          position={gamePosition}\r\n          onPieceDrop={onDrop}\r\n        />\r\n\r\n        <div className={cls.buttons}>\r\n          <Button\r\n            onClick={() => {\r\n              game.reset();\r\n              setGamePosition(game.fen());\r\n            }}\r\n          >\r\n            –ù–æ–≤–∞—è –∏–≥—Ä–∞\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              game.undo();\r\n              game.undo();\r\n              setGamePosition(game.fen());\r\n            }}\r\n          >\r\n            –ù–∞–∑–∞–¥\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { StockfishOnlineChessboard } from \"widgets/StockfishOnlineChessboard\";\r\n\r\ninterface StockfishOnlineProps {\r\n  className?: string;\r\n}\r\n\r\nconst StockfishOnline = ({ className }: StockfishOnlineProps) => {\r\n  return (\r\n    <div>\r\n      <StockfishOnlineChessboard />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockfishOnline;\r\n"],"names":["urlParams","chessDefaultPosition","sounds","captureSound","Audio","castlingSound","checkSound","checkmateSound","moveSound","key","Object","keys","volume","levels","easy","text","depth","normal","hard","StockfishOnlineChessboard","_ref","className","defaultPosition","location","useLocation","params","useMemo","URLSearchParams","search","game","Chess","get","fen","gamePosition","setGamePosition","useState","stockfishLevel","setStockfishLevel","move","moveObj","moved","console","log","game_over","in_draw","play","in_check","san","captured","useEffect","load","_jsx","classNames","cls","children","_jsxs","entries","map","_ref2","level","config","Button","onClick","theme","ButtonTheme","CLASSIC","active","concat","Chessboard","id","position","onPieceDrop","sourceSquare","targetSquare","piece","notEnd","from","to","promotion","toLowerCase","setTimeout","async","data","axios","success","error","bestMove","ponder","line","bestMoveMatch","match","ponderMatch","parseBestMoveLine","bestmove","slice","findBestMove","reset","undo"],"sourceRoot":""}
{"version":3,"file":"static/js/490.eb92eb2f.chunk.js","mappings":"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","sources":["shared/config/consts/urlParams.ts","shared/lib/sounds/sounds.ts","webpack://stockfish-web/./src/widgets/MyChessboard/ui/MyChessboard.module.scss?eb1e","app/stockfish/engine.ts","widgets/MyChessboard/ui/MyChessboard.tsx","pages/Play/ui/Play.tsx"],"sourcesContent":["export const urlParams = {\r\n  chessDefaultPosition: \"board-pos\",\r\n};\r\n","const volume = 0.2;\r\n\r\nexport const sounds = {\r\n  captureSound: new Audio(\"./sound/capture.mp3\"),\r\n  castlingSound: new Audio(\"./sound/castling.mp3\"),\r\n  checkSound: new Audio(\"./sound/check.mp3\"),\r\n  checkmateSound: new Audio(\"./sound/checkmate.mp3\"),\r\n  moveSound: new Audio(\"./sound/move.mp3\"),\r\n};\r\n\r\nfor (let key of Object.keys(sounds)) {\r\n  sounds[key].volume = volume;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"MyChessboard\":\"MyChessboard_MyChessboard__BjqC1\",\"chessboardWrapper\":\"MyChessboard_chessboardWrapper__AtQ+W\",\"buttons\":\"MyChessboard_buttons__Dfxko\"};","// documentation: https://official-stockfish.github.io/docs/stockfish-wiki/UCI-&-Commands.html\r\n\r\nconst MINIMUM_DEPTH = 1;\r\nconst MAXIMUM_DEPTH = 24;\r\nconst NUMBER_OF_THREADS = 4;\r\n\r\ntype EngineMessage = {\r\n  /* сообщение движка stockfish в формате UCI */\r\n  uciMessage: string;\r\n  /* найден лучший ход для текущей позиции в формате `e2e4`*/\r\n  bestMove?: string;\r\n  /* найден лучший ход для противника в формате `e7e5` */\r\n  ponder?: string;\r\n  /*  разница материального баланса в центипешках (ВАЖНО! Stockfish дает счет cp в зависимости от того, чей сейчас ход) */\r\n  positionEvaluation?: number;\r\n  /* количество ходов до мата */\r\n  possibleMate?: number;\r\n  /* лучшие найденные ходы */\r\n  pv?: string[];\r\n  /* количество полуходов, на которые двигатель смотрит вперед */\r\n  depth?: number;\r\n};\r\n\r\nexport type EngineMessageCallback = (msg: EngineMessage) => void;\r\n\r\nexport default class Engine {\r\n  private stockfish: Worker;\r\n  private readyPromise: Promise<void>;\r\n  private resolveReady: (value: void | PromiseLike<void>) => void;\r\n  private abortController = new AbortController();\r\n  private messageCallbacks = new Set<EngineMessageCallback>();\r\n  private _depth: number;\r\n  private _thinkTime = 1000;\r\n\r\n  constructor() {\r\n    this.stockfish = new Worker(\"./stockfish.js\");\r\n\r\n    // Создаем промис для отслеживания готовности\r\n    this.readyPromise = new Promise((resolve) => {\r\n      this.resolveReady = resolve;\r\n    });\r\n\r\n    this.initializeEngine();\r\n    this.setThreads(NUMBER_OF_THREADS);\r\n  }\r\n\r\n  private initializeEngine() {\r\n    // Добавляем обработчик ДО отправки сообщений\r\n    this.stockfish.addEventListener(\"message\", this.handleEngineMessage, {\r\n      signal: this.abortController.signal,\r\n      once: false,\r\n    });\r\n\r\n    this.stockfish.postMessage(\"uci\");\r\n    this.stockfish.postMessage(\"isready\");\r\n  }\r\n\r\n  private handleEngineMessage = (e: MessageEvent) => {\r\n    console.log(\"Engine message:\", e.data); // Логируем все сообщения\r\n    const msg = this.parseMessage(e.data);\r\n    // Оповещаем подписчиков\r\n    this.messageCallbacks.forEach((cb) => cb(msg));\r\n\r\n    if (e.data === \"readyok\") {\r\n      this.resolveReady(); // Разрешаем промис готовности\r\n      console.log(\"ENGINE IS READY!\");\r\n    }\r\n  };\r\n\r\n  // Асинхронный метод ожидания готовности\r\n  private waitForReady(): Promise<void> {\r\n    return this.readyPromise;\r\n  }\r\n\r\n  private parseMessage(data: string): EngineMessage {\r\n    return {\r\n      uciMessage: data,\r\n      bestMove: data.match(/bestmove\\s+(\\S+)/)?.[1],\r\n      ponder: data.match(/ponder\\s+(\\S+)/)?.[1],\r\n      positionEvaluation: this.parseEvaluation(data),\r\n      possibleMate: this.parseMate(data),\r\n      pv: data.match(/ pv\\s+(.*)/)?.[1].split(\" \"),\r\n      depth: Number(data.match(/ depth\\s+(\\d+)/)?.[1]),\r\n    };\r\n  }\r\n\r\n  private parseEvaluation(data: string): number | undefined {\r\n    const match = data.match(/cp\\s+(-?\\d+)/);\r\n    return match ? parseInt(match[1], 10) / 100 : undefined;\r\n  }\r\n\r\n  private parseMate(data: string): number | undefined {\r\n    const match = data.match(/mate\\s+(-?\\d+)/);\r\n    return match ? parseInt(match[1], 10) : undefined;\r\n  }\r\n\r\n  get depth() {\r\n    return this._depth;\r\n  }\r\n\r\n  get thinkTime() {\r\n    return this._thinkTime;\r\n  }\r\n\r\n  addMessageListener(callback: (msg: EngineMessage) => void) {\r\n    this.messageCallbacks.add(callback);\r\n  }\r\n\r\n  removeMessageListener(callback: (msg: EngineMessage) => void) {\r\n    this.messageCallbacks.delete(callback);\r\n  }\r\n\r\n  async evaluatePosition(fen: string, thinkTime?: number) {\r\n    console.log(\"evaluationg position...\");\r\n    console.log(\"waiting for engine ready...\");\r\n    await this.waitForReady();\r\n    console.log(\"promise is ready\");\r\n\r\n    this.stop(); // Останавливаем предыдущий анализ\r\n\r\n    this.stockfish.postMessage(`position fen ${fen}`);\r\n\r\n    console.log(\"current depth is \", this.depth);\r\n    let goCommand = \"go\";\r\n    goCommand += ` depth ${this.depth}`;\r\n    goCommand += ` movetime ${thinkTime}`;\r\n\r\n    console.log(\"go command: \", goCommand);\r\n\r\n    this.stockfish.postMessage(goCommand);\r\n\r\n    // Автоматическая остановка по таймауту\r\n    // if (thinkTime) {\r\n    //   this.currentTimer = setTimeout(() => {\r\n    //     this.stop();\r\n    //   }, thinkTime);\r\n    // }\r\n  }\r\n\r\n  stop() {\r\n    // if (this.currentTimer) {\r\n    //   clearTimeout(this.currentTimer);\r\n    //   this.currentTimer = undefined;\r\n    // }\r\n    this.stockfish.postMessage(\"stop\");\r\n  }\r\n\r\n  terminate() {\r\n    this.stop();\r\n    this.abortController.abort();\r\n    this.stockfish.postMessage(\"quit\");\r\n    this.messageCallbacks.clear();\r\n  }\r\n\r\n  // Дополнительные методы\r\n  setThinkTime(time: number) {\r\n    this._thinkTime = time;\r\n  }\r\n\r\n  setDepth(depth: number) {\r\n    if (depth < MINIMUM_DEPTH) depth = MINIMUM_DEPTH;\r\n    else if (depth > MAXIMUM_DEPTH) depth = MAXIMUM_DEPTH;\r\n    this._depth = depth;\r\n    console.log(`depth of stockfish is set to ${this.depth}`);\r\n  }\r\n\r\n  setSkillLevel(level: number) {\r\n    this.stockfish.postMessage(`setoption name Skill Level value ${level}`);\r\n  }\r\n\r\n  setThreads(threads: number) {\r\n    this.stockfish.postMessage(`setoption name Threads value ${threads}`);\r\n  }\r\n\r\n  setMultiPV(n: number) {\r\n    this.stockfish.postMessage(`setoption name MultiPV value ${n}`);\r\n  }\r\n\r\n  setLimitStrength(limit: boolean, elo = 1320) {\r\n    this.stockfish.postMessage(\r\n      `setoption name UCI_LimitStrength value ${limit}`\r\n    );\r\n    this.stockfish.postMessage(`setoption name UCI_Elo value ${elo}`);\r\n  }\r\n}\r\n","import { classNames } from \"shared/lib/classNames/classNames\";\r\nimport cls from \"./MyChessboard.module.scss\";\r\nimport { Button, ButtonTheme } from \"shared/ui/Button/Button\";\r\nimport { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport Engine, { EngineMessageCallback } from \"app/stockfish/engine\";\r\nimport Chess from \"chess.js\";\r\nimport { Chessboard } from \"react-chessboard\";\r\nimport { Piece, Square } from \"react-chessboard/dist/chessboard/types\";\r\nimport { sounds } from \"shared/lib/sounds/sounds\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\nimport { urlParams } from \"shared/config/consts/urlParams\";\r\n\r\ninterface MyChessboardProps {\r\n  className?: string;\r\n  defaultPosition?: string;\r\n}\r\n\r\ninterface LevelsConfig {\r\n  text: string;\r\n  skill: number;\r\n  depth: number;\r\n  thinkTime: number;\r\n  elo?: number;\r\n  multiPV?: number;\r\n  threads?: number;\r\n}\r\n\r\n// Уровни с комбинированными параметрами\r\nconst levels: Record<string, LevelsConfig> = {\r\n  easy: {\r\n    text: \"Легко 🤓\",\r\n    skill: 2, // Минимальный уровень навыка\r\n    // elo: 1350, // Ограничение по рейтингу\r\n    depth: 5, // Ограниченная глубина\r\n    thinkTime: 500, // Малое время на ход\r\n    multiPV: 3,\r\n  },\r\n  normal: {\r\n    text: \"Нормально 🧐\",\r\n    skill: 10, // Средний уровень\r\n    depth: 12, // Умеренная глубина\r\n    thinkTime: 1000,\r\n    multiPV: 3, // Рассматривать несколько вариантов\r\n  },\r\n  hard: {\r\n    text: \"Сложно 😵\",\r\n    skill: 20, // Максимальный уровень\r\n    depth: 22, // Глубокая аналитика\r\n    thinkTime: 3000,\r\n    threads: 6, // Использовать больше потоков\r\n    multiPV: 1, // Только лучший вариант\r\n  },\r\n};\r\n\r\nconst MAX_ENGINE_THINK_TIME = 1000;\r\nconst OPENING_MOVES = 10;\r\n\r\nexport const MyChessboard = ({\r\n  className,\r\n  defaultPosition,\r\n}: MyChessboardProps) => {\r\n  const location = useLocation();\r\n  const params = useMemo(\r\n    () => new URLSearchParams(location.search),\r\n    [location.search]\r\n  );\r\n\r\n  const game = useMemo(() => new Chess(), []);\r\n\r\n  defaultPosition = useMemo(\r\n    () =>\r\n      defaultPosition ||\r\n      params.get(urlParams.chessDefaultPosition) ||\r\n      game.fen(),\r\n    [defaultPosition, params, game]\r\n  );\r\n\r\n  const engineRef = useRef<Engine | null>(null);\r\n  const [gamePosition, setGamePosition] = useState(\r\n    defaultPosition || params.get(urlParams.chessDefaultPosition) || game.fen()\r\n  );\r\n  const [stockfishLevel, setStockfishLevel] =\r\n    useState<keyof typeof levels>(\"easy\");\r\n  const [isOpening, setIsOpening] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const engine = new Engine();\r\n    engineRef.current = engine;\r\n\r\n    const config = levels[stockfishLevel];\r\n\r\n    // Всегда сбрасываем ограничение силы перед настройкой\r\n    engine.setLimitStrength(false);\r\n\r\n    // Настройка параметров\r\n    engine.setSkillLevel(config.skill);\r\n    engine.setDepth(config.depth);\r\n\r\n    if (config.elo) {\r\n      engine.setLimitStrength(true, config.elo);\r\n    }\r\n\r\n    if (config.threads) {\r\n      engine.setThreads(config.threads);\r\n    }\r\n\r\n    if (config.multiPV) {\r\n      engine.setMultiPV(config.multiPV);\r\n    } else {\r\n      engine.setMultiPV(1);\r\n    }\r\n\r\n    console.log(`Stockfish level set to: ${stockfishLevel}`, config);\r\n  }, [stockfishLevel, engineRef]);\r\n\r\n  // Загрузить начальную позицию\r\n  useEffect(() => {\r\n    game.load(defaultPosition);\r\n  }, [defaultPosition, game]);\r\n\r\n  function selectBestMove(moves: string[]): string {\r\n    const randomness = 0.3;\r\n    // Чем выше randomness, тем более случайный выбор\r\n    const weights = moves.map((_, i) => Math.exp(-i * randomness));\r\n    const total = weights.reduce((a, b) => a + b, 0);\r\n    let random = Math.random() * total;\r\n\r\n    return (\r\n      moves.find((_, i) => {\r\n        random -= weights[i];\r\n        return random <= 0;\r\n      }) || moves[0]\r\n    );\r\n  }\r\n\r\n  function move(moveObj: { from: string; to: string; promotion?: string }) {\r\n    const moved: {\r\n      captured?: string;\r\n      color: \"w\" | \"b\";\r\n      from: Square;\r\n      to: Square;\r\n      san?: string;\r\n      piece: Piece;\r\n    } | null = game.move(moveObj);\r\n\r\n    setGamePosition(game.fen());\r\n    console.log(moved);\r\n    if (moved === null) {\r\n      return false;\r\n    }\r\n\r\n    if (game.history().length >= OPENING_MOVES) {\r\n      setIsOpening(false);\r\n    }\r\n\r\n    if (game.game_over() || game.in_draw()) {\r\n      sounds.checkmateSound.play();\r\n      return false;\r\n    }\r\n\r\n    if (game.in_check()) {\r\n      sounds.checkSound.play();\r\n      return true;\r\n    }\r\n\r\n    if (moved.san === \"O-O-O\" || moved.san === \"O-O\") {\r\n      sounds.castlingSound.play();\r\n      return true;\r\n    }\r\n\r\n    if (moved.captured) {\r\n      sounds.captureSound.play();\r\n      return true;\r\n    }\r\n\r\n    sounds.moveSound.play();\r\n    return true;\r\n  }\r\n\r\n  // Создаем уникальную ссылку на обработчик\r\n  const handler: EngineMessageCallback = (message) => {\r\n    console.log(message);\r\n    console.log(\"Best move received:\", message.bestMove);\r\n\r\n    const engine = engineRef.current;\r\n\r\n    const variants: string[] = [];\r\n\r\n    if (message.pv && message.bestMove) {\r\n      variants.push(message.bestMove);\r\n\r\n      const selectedMove = selectBestMove(variants);\r\n\r\n      const moveResult = move({\r\n        from: selectedMove.substring(0, 2),\r\n        to: selectedMove.substring(2, 4),\r\n        promotion: selectedMove.substring(4, 5),\r\n      });\r\n\r\n      // Удаляем обработчик независимо от результата хода\r\n      engine.removeMessageListener(handler);\r\n\r\n      if (!moveResult) {\r\n        engine.stop();\r\n      }\r\n    }\r\n  };\r\n\r\n  async function findBestMove() {\r\n    const engine = engineRef.current;\r\n    // Добавляем обработчик перед запуском анализа\r\n    engine.addMessageListener(handler);\r\n    console.log(\"finding best move...\");\r\n\r\n    try {\r\n      await engine.evaluatePosition(\r\n        game.fen(),\r\n        isOpening ? Math.ceil(MAX_ENGINE_THINK_TIME / 2) : MAX_ENGINE_THINK_TIME\r\n      );\r\n    } catch (error) {\r\n      engine.removeMessageListener(handler);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Очистка при размонтировании\r\n  useEffect(() => {\r\n    return () => engineRef.current.terminate();\r\n  }, [engineRef]);\r\n\r\n  function onDrop(sourceSquare: Square, targetSquare: Square, piece: Piece) {\r\n    console.log(sourceSquare, targetSquare, piece);\r\n    const notEnd = move({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: piece[1].toLowerCase(),\r\n    });\r\n\r\n    // Задержка чтобы компьютер не ходил моментально\r\n    if (notEnd) {\r\n      setTimeout(() => {\r\n        findBestMove();\r\n      }, 500);\r\n    }\r\n    return notEnd;\r\n  }\r\n\r\n  return (\r\n    <div className={classNames(cls.MyChessboard, {}, [className])}>\r\n      <div className={cls.chessboardWrapper}>\r\n        <div className={cls.buttons}>\r\n          {Object.entries(levels).map(([level, config]) => (\r\n            <Button\r\n              key={`${level}`}\r\n              onClick={() => setStockfishLevel(level)}\r\n              theme={ButtonTheme.CLASSIC}\r\n              active={stockfishLevel === level}\r\n            >\r\n              {config.text}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n\r\n        <Chessboard\r\n          id=\"PlayVsStockfish\"\r\n          position={gamePosition}\r\n          onPieceDrop={onDrop}\r\n        />\r\n\r\n        <div className={cls.buttons}>\r\n          <Button\r\n            onClick={() => {\r\n              game.reset();\r\n              setGamePosition(game.fen());\r\n            }}\r\n          >\r\n            Новая игра\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              game.undo();\r\n              game.undo();\r\n              setGamePosition(game.fen());\r\n            }}\r\n          >\r\n            Назад\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { MyChessboard } from \"widgets/MyChessboard\";\r\n\r\ninterface PlayProps {\r\n  className?: string;\r\n}\r\n\r\nconst Play = ({ className }: PlayProps) => {\r\n  return (\r\n    <div>\r\n      <MyChessboard />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Play;\r\n"],"names":["urlParams","chessDefaultPosition","sounds","captureSound","Audio","castlingSound","checkSound","checkmateSound","moveSound","key","Object","keys","volume","Engine","constructor","stockfish","readyPromise","resolveReady","abortController","AbortController","messageCallbacks","Set","_depth","_thinkTime","handleEngineMessage","e","console","log","data","msg","this","parseMessage","forEach","cb","Worker","Promise","resolve","initializeEngine","setThreads","addEventListener","signal","once","postMessage","waitForReady","_data$match","_data$match2","_data$match3","_data$match4","uciMessage","bestMove","match","ponder","positionEvaluation","parseEvaluation","possibleMate","parseMate","pv","split","depth","Number","parseInt","undefined","thinkTime","addMessageListener","callback","add","removeMessageListener","delete","evaluatePosition","fen","stop","concat","goCommand","terminate","abort","clear","setThinkTime","time","setDepth","setSkillLevel","level","threads","setMultiPV","n","setLimitStrength","limit","elo","arguments","length","levels","easy","text","skill","multiPV","normal","hard","MyChessboard","_ref","className","defaultPosition","location","useLocation","params","useMemo","URLSearchParams","search","game","Chess","get","engineRef","useRef","gamePosition","setGamePosition","useState","stockfishLevel","setStockfishLevel","isOpening","setIsOpening","move","moveObj","moved","history","game_over","in_draw","play","in_check","san","captured","useEffect","engine","current","config","load","handler","message","variants","push","selectedMove","moves","weights","map","_","i","Math","exp","total","reduce","a","b","random","find","selectBestMove","moveResult","from","substring","to","promotion","_jsx","classNames","cls","children","_jsxs","entries","_ref2","Button","onClick","theme","ButtonTheme","CLASSIC","active","Chessboard","id","position","onPieceDrop","sourceSquare","targetSquare","piece","notEnd","toLowerCase","setTimeout","async","ceil","MAX_ENGINE_THINK_TIME","error","findBestMove","reset","undo"],"sourceRoot":""}
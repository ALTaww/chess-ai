{"version":3,"file":"static/js/52.859460f2.chunk.js","mappings":"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","sources":["webpack://stockfish-web/./src/widgets/AnalysisBoard/ui/AnalysisBoard.module.scss?9e65","widgets/AnalysisBoard/ui/AnalysisBoard.tsx","pages/Analyze/ui/Analyze.tsx","shared/lib/sounds/sounds.ts","webpack://stockfish-web/./src/shared/ui/FenInput/FenInput.module.scss?c4c8","webpack://stockfish-web/./src/shared/ui/Input/Input.module.scss?eef6","shared/ui/Input/Input.tsx","shared/ui/FenInput/FenInput.tsx","app/stockfish/engine.ts","shared/ui/Portal/Portal.tsx","webpack://stockfish-web/./src/shared/ui/Modal/Modal.module.scss?37a1","shared/ui/Modal/Modal.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"AnalysisBoard\":\"AnalysisBoard_AnalysisBoard__5GhdZ\",\"chessboardWrapper\":\"AnalysisBoard_chessboardWrapper__AphH8\",\"buttons\":\"AnalysisBoard_buttons__WjXZa\",\"bestLine\":\"AnalysisBoard_bestLine__9V1IQ\"};","import { classNames } from \"shared/lib/classNames/classNames\";\r\nimport cls from \"./AnalysisBoard.module.scss\";\r\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport Engine, { EngineMessageCallback } from \"app/stockfish/engine\";\r\nimport Chess from \"chess.js\";\r\nimport { Button, ButtonTheme } from \"shared/ui/Button/Button\";\r\nimport { Chessboard } from \"react-chessboard\";\r\nimport { Piece, Square } from \"react-chessboard/dist/chessboard/types\";\r\nimport { sounds } from \"shared/lib/sounds/sounds\";\r\nimport { FenInput } from \"shared/ui/FenInput/FenInput\";\r\nimport { Modal } from \"shared/ui/Modal/Modal\";\r\n\r\ninterface AnalysisBoardProps {\r\n  className?: string;\r\n  defaultPosition?: string;\r\n}\r\n\r\ninterface LevelsConfig {\r\n  skill: number;\r\n  depth: number;\r\n  thinkTime: number;\r\n  elo?: number;\r\n  multiPV?: number;\r\n  threads?: number;\r\n}\r\n\r\n// Уровни с комбинированными параметрами\r\nconst level: LevelsConfig = {\r\n  skill: 20, // Максимальный уровень\r\n  depth: 245, // Максимальная глубина\r\n  thinkTime: 10000, // 10 сек\r\n};\r\n\r\nexport const AnalysisBoard = ({\r\n  className,\r\n  defaultPosition,\r\n}: AnalysisBoardProps) => {\r\n  const game = useMemo(() => new Chess(), []);\r\n\r\n  const engineRef = useRef<Engine | null>(null);\r\n  const [chessBoardPosition, setChessBoardPosition] = useState(\r\n    defaultPosition || game.fen()\r\n  );\r\n  const [positionEvaluation, setPositionEvaluation] = useState(0);\r\n  const [depth, setDepth] = useState(10);\r\n  const [bestLine, setBestline] = useState<string[]>([]);\r\n  const [possibleMate, setPossibleMate] = useState<number | null>(null);\r\n  const [boardOrientation, setBoardOrientation] = useState<\"white\" | \"black\">(\r\n    \"white\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Если старый engine существует, завершаем его\r\n    if (engineRef.current) {\r\n      engineRef.current.terminate();\r\n    }\r\n\r\n    const engine = new Engine();\r\n    engineRef.current = engine;\r\n\r\n    const config = level;\r\n\r\n    // Сбрасываем лимит по рейтингу и настраиваем skill/depth/threads/multiPV\r\n    engine.setSkillLevel(config.skill);\r\n    engine.setDepth(config.depth);\r\n    engine.setThinkTime(config.thinkTime);\r\n\r\n    if (config.elo) {\r\n      engine.setLimitStrength(true, config.elo);\r\n    }\r\n\r\n    if (config.threads) {\r\n      engine.setThreads(config.threads);\r\n    }\r\n\r\n    if (config.multiPV) {\r\n      engine.setMultiPV(config.multiPV);\r\n    }\r\n\r\n    findBestMove();\r\n\r\n    return () => {\r\n      engine.terminate();\r\n      engineRef.current = null;\r\n    };\r\n  }, []);\r\n\r\n  function move(moveObj: {\r\n    from: string;\r\n    to: string;\r\n    promotion?: string;\r\n  }): boolean {\r\n    const moved = game.move(moveObj);\r\n    setChessBoardPosition(game.fen());\r\n\r\n    if (moved === null) {\r\n      return false;\r\n    }\r\n    if (game.game_over() || game.in_draw()) {\r\n      sounds.checkmateSound.play();\r\n      setIsGameOverModal(true);\r\n      return false;\r\n    }\r\n    if (game.in_check()) {\r\n      sounds.checkSound.play();\r\n      return true;\r\n    }\r\n    if (moved.san === \"O-O-O\" || moved.san === \"O-O\") {\r\n      sounds.castlingSound.play();\r\n      return true;\r\n    }\r\n    if (moved.captured) {\r\n      sounds.captureSound.play();\r\n      return true;\r\n    }\r\n    sounds.moveSound.play();\r\n    return true;\r\n  }\r\n\r\n  // Обработчик ответов от Engine\r\n  const handler: EngineMessageCallback = (message) => {\r\n    // console.log(\"[React ← EngineMessage]\", message);\r\n\r\n    const engine = engineRef.current;\r\n    if (!engine) return;\r\n\r\n    const { depth, positionEvaluation, possibleMate, pv } = message;\r\n\r\n    if (depth && depth < 10) return;\r\n    positionEvaluation &&\r\n      setPositionEvaluation(\r\n        ((game.turn() === \"w\" ? 1 : -1) * Number(positionEvaluation)) / 100\r\n      );\r\n    possibleMate && setPossibleMate(possibleMate);\r\n    depth && setDepth(depth);\r\n    pv && setBestline(pv);\r\n  };\r\n\r\n  const findBestMove = async () => {\r\n    const engine = engineRef.current;\r\n    if (!engine) return;\r\n\r\n    // Добавляем слушатель перед новой оценкой\r\n    engine.addMessageListener(handler);\r\n    console.log(\"Запрос лучшего хода…\");\r\n\r\n    try {\r\n      await engine.evaluatePosition(game.fen());\r\n    } catch (error) {\r\n      engine.removeMessageListener(handler);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  function onDrop(sourceSquare: Square, targetSquare: Square, piece: Piece) {\r\n    const notEnd = move({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: piece[1].toLowerCase(),\r\n    });\r\n    setPossibleMate(null);\r\n\r\n    setBestline([]);\r\n\r\n    if (notEnd) {\r\n      findBestMove();\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const bestMove = bestLine[0];\r\n  const handleFenInputChange = (fen: string) => {\r\n    const { valid } = game.validate_fen(fen);\r\n    if (valid) {\r\n      game.load(fen);\r\n      setChessBoardPosition(game.fen());\r\n      setBestline([]);\r\n      setPossibleMate(null);\r\n      setDepth(null);\r\n      findBestMove();\r\n    }\r\n  };\r\n\r\n  const [isGameOverModal, setIsGameOverModal] = useState(false);\r\n\r\n  const onToggleModal = useCallback(() => {\r\n    setIsGameOverModal(!isGameOverModal);\r\n  }, [isGameOverModal]);\r\n\r\n  return (\r\n    <div className={classNames(cls.AnalysisBoard, {}, [className])}>\r\n      <div className={cls.chessboardWrapper}>\r\n        <h4>\r\n          Оценка позиции:{\" \"}\r\n          {possibleMate ? `#${possibleMate}` : positionEvaluation.toFixed(4)}\r\n          {\"; \"}\r\n          Глубина: {depth}\r\n        </h4>\r\n        <h5 className={cls.bestLine}>\r\n          Лучшая линия: <i>{bestLine.slice(0, 10).join(\" \")}</i> ...\r\n        </h5>\r\n        <FenInput\r\n          fenPosition={chessBoardPosition}\r\n          onChange={handleFenInputChange}\r\n        />\r\n        <Chessboard\r\n          id=\"AnalysisBoard\"\r\n          position={chessBoardPosition}\r\n          onPieceDrop={onDrop}\r\n          customBoardStyle={{\r\n            borderRadius: \"4px\",\r\n            boxShadow: \"0 2px 10px rgba(0, 0, 0, 0.5)\",\r\n          }}\r\n          customArrows={\r\n            bestMove\r\n              ? [\r\n                  [\r\n                    bestMove.substring(0, 2) as Square,\r\n                    bestMove.substring(2, 4) as Square,\r\n                    \"rgb(0, 128, 0)\",\r\n                  ],\r\n                ]\r\n              : undefined\r\n          }\r\n          boardOrientation={boardOrientation}\r\n        />\r\n        <div className={cls.buttons}>\r\n          <Button\r\n            theme={ButtonTheme.CLASSIC}\r\n            onClick={() => {\r\n              setPossibleMate(null);\r\n              setBestline([]);\r\n              game.reset();\r\n              setChessBoardPosition(game.fen());\r\n              findBestMove();\r\n            }}\r\n          >\r\n            Начальная позиция\r\n          </Button>\r\n          <Button\r\n            theme={ButtonTheme.CLASSIC}\r\n            onClick={() => {\r\n              setPossibleMate(null);\r\n              setBestline([]);\r\n              game.undo();\r\n              setChessBoardPosition(game.fen());\r\n              findBestMove();\r\n            }}\r\n          >\r\n            Назад\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              setBoardOrientation(\r\n                boardOrientation === \"black\" ? \"white\" : \"black\"\r\n              );\r\n            }}\r\n          >\r\n            Перевернуть доску\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              findBestMove();\r\n            }}\r\n          >\r\n            Анализируй\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <Modal isOpen={isGameOverModal} onClose={onToggleModal}>\r\n        <p>Игра окончена!</p>\r\n        <div className={cls.buttons}>\r\n          <Button\r\n            onClick={() => {\r\n              game.reset();\r\n              setChessBoardPosition(game.fen());\r\n              setIsGameOverModal(false);\r\n              findBestMove();\r\n            }}\r\n          >\r\n            Новая игра\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              setIsGameOverModal(false);\r\n            }}\r\n          >\r\n            Назад\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n","import { AnalysisBoard } from \"widgets/AnalysisBoard\";\r\n\r\ninterface AnalyzeProps {\r\n  className?: string;\r\n}\r\n\r\nconst Analyze = ({ className }: AnalyzeProps) => {\r\n  return (\r\n    <div>\r\n      <AnalysisBoard />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Analyze;\r\n","const volume = 0.2;\r\n\r\nexport const sounds = {\r\n  captureSound: new Audio(\"./sound/capture.mp3\"),\r\n  castlingSound: new Audio(\"./sound/castling.mp3\"),\r\n  checkSound: new Audio(\"./sound/check.mp3\"),\r\n  checkmateSound: new Audio(\"./sound/checkmate.mp3\"),\r\n  moveSound: new Audio(\"./sound/move.mp3\"),\r\n};\r\n\r\nfor (let key of Object.keys(sounds)) {\r\n  sounds[key].volume = volume;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"FenInput\":\"FenInput_FenInput__+TRAY\",\"copyButton\":\"FenInput_copyButton__j+z8x\"};","// extracted by mini-css-extract-plugin\nexport default {\"Input\":\"Input_Input__hHLh7\"};","import { classNames } from \"shared/lib/classNames/classNames\";\r\nimport cls from \"./Input.module.scss\";\r\nimport { InputHTMLAttributes } from \"react\";\r\n\r\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\r\n  className?: string;\r\n}\r\n\r\nexport const Input = (props: InputProps) => {\r\n  const { className, ...restProps } = props;\r\n  return (\r\n    <input className={classNames(cls.Input, {}, [className])} {...restProps} />\r\n  );\r\n};\r\n","import { classNames } from \"shared/lib/classNames/classNames\";\r\nimport cls from \"./FenInput.module.scss\";\r\nimport { Input } from \"../Input/Input\";\r\nimport { ChangeEvent } from \"react\";\r\nimport { Button, ButtonSize, ButtonTheme } from \"../Button/Button\";\r\nimport copyImg from \"shared/assets/copy.png\";\r\n\r\ninterface FenInputProps {\r\n  className?: string;\r\n  fenPosition: string;\r\n  onChange: (fen: string) => void;\r\n}\r\n\r\nexport const FenInput = ({\r\n  className,\r\n  fenPosition,\r\n  onChange,\r\n}: FenInputProps) => {\r\n  const handleFenInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (onChange) {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n\r\n  const copy = () => {\r\n    navigator.clipboard.writeText(fenPosition);\r\n    console.log(\"copied\");\r\n  };\r\n\r\n  return (\r\n    <div className={classNames(cls.FenInput, {}, [className])}>\r\n      <Input\r\n        value={fenPosition}\r\n        onChange={handleFenInputChange}\r\n        placeholder=\"Вставьте позицию FEN, чтобы начать редактирование\"\r\n      />\r\n      <Button\r\n        onClick={copy}\r\n        theme={ButtonTheme.CLEAR}\r\n        className={cls.copyButton}\r\n        square\r\n      >\r\n        <img src={copyImg} alt=\"Копировать\" />\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","// documentation: https://official-stockfish.github.io/docs/stockfish-wiki/UCI-&-Commands.html\r\n\r\nconst MINIMUM_DEPTH = 1;\r\nconst MAXIMUM_DEPTH = 24;\r\n\r\ntype EngineMessage = {\r\n  /* исходное сообщение движка Stockfish */\r\n  uciMessage: string;\r\n  /* найден лучший ход для текущей позиции: e2e4 */\r\n  bestMove?: string;\r\n  /* ход «ponder» для противника: e7e5 */\r\n  ponder?: string;\r\n  /* оценка позиции (в пешечных единицах, ±cp/100) */\r\n  positionEvaluation?: number;\r\n  /* количество полуходов до мата, если найден мат */\r\n  possibleMate?: number;\r\n  /* строка с PV (последовательность ходов), разделёнными пробелами */\r\n  pv?: string[];\r\n  /* текущая глубина анализа */\r\n  depth?: number;\r\n};\r\n\r\nexport type EngineMessageCallback = (msg: EngineMessage) => void;\r\n\r\nexport default class Engine {\r\n  private stockfish: Worker;\r\n  private isInitialized = false;\r\n  private readyPromise: Promise<void>;\r\n  private resolveReady!: () => void;\r\n  private messageCallbacks = new Set<EngineMessageCallback>();\r\n  private _depth: number;\r\n  private _thinkTime: number;\r\n\r\n  constructor() {\r\n    this.stockfish = new Worker(\"./stockfish.js\");\r\n    // создаём promise, который разрешится после получения первого 'readyok'\r\n    this.readyPromise = new Promise((resolve) => {\r\n      this.resolveReady = resolve;\r\n    });\r\n\r\n    this.initializeEngine();\r\n  }\r\n\r\n  /**\r\n   * Первый handshake с движком:\r\n   * 1) Отправляем 'uci'\r\n   * 2) Ждём 'readyok'\r\n   *\r\n   * После получения первого 'readyok' флаг this.isInitialized станет true,\r\n   * и resolveReady() разрешит все методы, ожидающие готовности движка.\r\n   */\r\n  private initializeEngine() {\r\n    this.stockfish.addEventListener(\"message\", this.handleEngineMessage, {\r\n      once: false,\r\n    });\r\n\r\n    // Запускаем UCI-режим\r\n    this.stockfish.postMessage(\"uci\");\r\n    // Спрашиваем, готов ли движок\r\n    this.stockfish.postMessage(\"isready\");\r\n  }\r\n\r\n  private handleEngineMessage = (e: MessageEvent) => {\r\n    const data: string = e.data;\r\n    // Логируем raw-сообщения (можно отключить в production)\r\n    // console.log(\"[Engine →]\", data);\r\n\r\n    // Распарываем часть UCI-информации\r\n    const msg = this.parseMessage(data);\r\n    // Оповещаем всех внешних слушателей\r\n    this.messageCallbacks.forEach((cb) => cb(msg));\r\n\r\n    // Первый readyok после 'isready'\r\n    if (data === \"readyok\" && !this.isInitialized) {\r\n      this.isInitialized = true;\r\n      // Разрешаем този, кто ждёт initial ready\r\n      this.resolveReady();\r\n      console.log(\"ENGINE IS INITIALIZED AND READY!\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Ждём, пока движок не ответит первым 'readyok'.\r\n   * Все вызовы setOption…() будут ждать именно эту promise.\r\n   */\r\n  private async waitForInitialReady(): Promise<void> {\r\n    if (!this.isInitialized) {\r\n      await this.readyPromise;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Парсинг любого UCI-сообщения из движка в наш формат EngineMessage.\r\n   */\r\n  private parseMessage(data: string): EngineMessage {\r\n    const bestMove = data.match(/bestmove\\s+(\\S+)/)?.[1];\r\n    const ponder = data.match(/ponder\\s+(\\S+)/)?.[1];\r\n    const cpMatch = data.match(/score cp\\s+(-?\\d+)/);\r\n    const mateMatch = data.match(/score mate\\s+(-?\\d+)/);\r\n    const depthMatch = data.match(/info.*\\bdepth\\s+(\\d+)/);\r\n    const pvMatch = data.match(/info.*\\b pv\\s+(.+)/);\r\n\r\n    return {\r\n      uciMessage: data,\r\n      bestMove: bestMove || undefined,\r\n      ponder: ponder || undefined,\r\n      positionEvaluation: cpMatch ? parseInt(cpMatch[1], 10) / 100 : undefined,\r\n      possibleMate: mateMatch ? parseInt(mateMatch[1], 10) : undefined,\r\n      pv: pvMatch ? pvMatch[1].trim().split(/\\s+/) : undefined,\r\n      depth: depthMatch ? Number(depthMatch[1]) : undefined,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Добавляем внешнего слушателя — он будет получать каждый EngineMessage\r\n   */\r\n  addMessageListener(callback: EngineMessageCallback) {\r\n    this.messageCallbacks.add(callback);\r\n  }\r\n\r\n  removeMessageListener(callback: EngineMessageCallback) {\r\n    this.messageCallbacks.delete(callback);\r\n  }\r\n\r\n  /**\r\n   * Отправка команды «остановиться» (прерывает текущий поиск).\r\n   */\r\n  stop() {\r\n    this.stockfish.postMessage(\"stop\");\r\n  }\r\n\r\n  /**\r\n   * Полное завершение работы с движком:\r\n   * - Останавливаем все вычисления\r\n   * - Удаляем всех слушателей\r\n   * - Отправляем 'quit'\r\n   */\r\n  terminate() {\r\n    this.stop();\r\n    this.stockfish.postMessage(\"quit\");\r\n    this.messageCallbacks.clear();\r\n  }\r\n\r\n  /****************************\r\n   *   Методы установки опций  *\r\n   ****************************/\r\n\r\n  /**\r\n   * Устанавливает уровень навыка (Skill Level).\r\n   * Отложит команду, пока движок не станет ready впервые.\r\n   */\r\n  setSkillLevel(level: number) {\r\n    this.waitForInitialReady().then(() => {\r\n      this.stockfish.postMessage(`setoption name Skill Level value ${level}`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Устанавливает максимальную глубину поиска (UCI_option \"Depth\").\r\n   */\r\n  setDepth(depth: number) {\r\n    if (depth < MINIMUM_DEPTH) depth = MINIMUM_DEPTH;\r\n    else if (depth > MAXIMUM_DEPTH) depth = MAXIMUM_DEPTH;\r\n    this._depth = depth;\r\n\r\n    this.waitForInitialReady().then(() => {\r\n      this.stockfish.postMessage(`setoption name Depth value ${depth}`);\r\n    });\r\n    console.log(`Новая глубина поиска: ${this._depth}`);\r\n  }\r\n\r\n  /**\r\n   * Устанавливает «think time» — ограничение по времени (в миллисекундах).\r\n   * Само по себе значение не передаётся в setoption:\r\n   * мы будем использовать его в goCommand (или можно снять ограничение).\r\n   */\r\n  setThinkTime(time: number) {\r\n    this._thinkTime = time;\r\n    console.log(`Новое время на ход (миллисекунды): ${this._thinkTime}`);\r\n  }\r\n\r\n  /**\r\n   * Потоки, которые движок может использовать (UCI_option \"Threads\").\r\n   *\r\n   */\r\n  setThreads(threads: number) {\r\n    this.waitForInitialReady().then(() => {\r\n      this.stockfish.postMessage(`setoption name Threads value ${threads}`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Сколько вариантов (MultiPV) возвращать.\r\n   */\r\n  setMultiPV(n: number) {\r\n    this.waitForInitialReady().then(() => {\r\n      this.stockfish.postMessage(`setoption name MultiPV value ${n}`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Включает или отключает ограничение по рейтингу, и задаёт Elo.\r\n   * (UCI_option UCI_LimitStrength и UCI_Elo).\r\n   */\r\n  setLimitStrength(limit: boolean, elo = 1320) {\r\n    this.waitForInitialReady().then(() => {\r\n      this.stockfish.postMessage(\r\n        `setoption name UCI_LimitStrength value ${limit ? \"true\" : \"false\"}`\r\n      );\r\n      // Если limit=false, значение UCI_Elo всё равно «примется», но не будет влиять.\r\n      this.stockfish.postMessage(`setoption name UCI_Elo value ${elo}`);\r\n    });\r\n  }\r\n\r\n  /*********************************************\r\n   *    Основной метод: анализ позиции (go)     *\r\n   *********************************************/\r\n\r\n  /**\r\n   * Запрашивает от движка лучший ход для позиции FEN.\r\n   * Теперь каждый раз перед поиском мы:\r\n   *  1) Останавливаем предыдущий поиск (stop)\r\n   *  2) Посылаем 'ucinewgame', 'isready' → ждём нового 'readyok'\r\n   *  3) Устанавливаем позицию → «go depth N»\r\n   */\r\n  async evaluatePosition(fen: string) {\r\n    // Ждём, пока движок вообще инициализирован\r\n    await this.waitForInitialReady();\r\n\r\n    // 1) Прерываем предыдущий анализ (если он был)\r\n    this.stop();\r\n\r\n    // 2) Сбрасываем внутреннее состояние движка перед новым анализом\r\n    await new Promise<void>((resolve) => {\r\n      const onReadyForNewGame = (e: MessageEvent) => {\r\n        if (e.data === \"readyok\") {\r\n          this.stockfish.removeEventListener(\"message\", onReadyForNewGame);\r\n          resolve();\r\n        }\r\n      };\r\n      this.stockfish.addEventListener(\"message\", onReadyForNewGame);\r\n      this.stockfish.postMessage(\"ucinewgame\");\r\n      this.stockfish.postMessage(\"isready\");\r\n    });\r\n\r\n    // 3) Отправляем позицию\r\n    this.stockfish.postMessage(`position fen ${fen}`);\r\n\r\n    // 4) Формируем команду «go»\r\n    let goCommand = `go`;\r\n    if (this._depth) goCommand += ` depth ${this._depth}`;\r\n    if (this._thinkTime) goCommand += ` movetime ${this._thinkTime}`;\r\n    console.log(`[Engine ←] ${goCommand}`);\r\n    this.stockfish.postMessage(goCommand);\r\n  }\r\n}\r\n","import { ReactNode } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\ninterface PortalProps {\r\n  children: ReactNode;\r\n  element?: HTMLElement\r\n}\r\n\r\nexport const Portal = (props: PortalProps) => {\r\n  const {\r\n    children,\r\n    element = document.body,\r\n  } = props;\r\n\r\n  return (\r\n    createPortal(children, element)\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"Modal\":\"Modal_Modal__47RDU\",\"overlay\":\"Modal_overlay__lpaR1\",\"content\":\"Modal_content__TWhw1\",\"opened\":\"Modal_opened__iZlPA\",\"isClosing\":\"Modal_isClosing__AoAui\"};","import { classNames } from \"shared/lib/classNames/classNames\";\r\nimport {\r\n  MouseEvent,\r\n  ReactNode,\r\n  useCallback,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { Portal } from \"shared/ui/Portal/Portal\";\r\nimport cls from \"./Modal.module.scss\";\r\n\r\ninterface ModalProps {\r\n  className?: string;\r\n  children?: ReactNode;\r\n  isOpen?: boolean;\r\n  onClose?: () => void;\r\n}\r\n\r\nconst ANIMATION_DELAY = 300;\r\n\r\nexport const Modal = (props: ModalProps) => {\r\n  const { className, children, isOpen, onClose } = props;\r\n\r\n  const [isClosing, setIsClosing] = useState(false);\r\n  const timerRef = useRef<ReturnType<typeof setTimeout>>(null);\r\n\r\n  const closeHandler = useCallback(() => {\r\n    if (onClose) {\r\n      setIsClosing(true);\r\n      timerRef.current = setTimeout(() => {\r\n        onClose();\r\n        setIsClosing(false);\r\n      }, ANIMATION_DELAY);\r\n    }\r\n  }, [onClose]);\r\n\r\n  const onContentClick = (e: MouseEvent) => {\r\n    e.stopPropagation();\r\n  };\r\n\r\n  const onKeyDown = useCallback(\r\n    (e: KeyboardEvent) => {\r\n      if (e.key === \"Escape\") {\r\n        closeHandler();\r\n      }\r\n    },\r\n    [closeHandler]\r\n  );\r\n\r\n  useEffect(() => {\r\n    console.log(\"\");\r\n\r\n    if (isOpen) {\r\n      window.addEventListener(\"keydown\", onKeyDown);\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout(timerRef.current);\r\n      window.removeEventListener(\"keydown\", onKeyDown);\r\n    };\r\n  }, [isOpen, onKeyDown]);\r\n\r\n  const mods: Record<string, boolean> = {\r\n    [cls.opened]: isOpen,\r\n    [cls.isClosing]: isClosing,\r\n  };\r\n\r\n  return (\r\n    <Portal>\r\n      <div className={classNames(cls.Modal, mods, [className])}>\r\n        <div className={cls.overlay} onClick={closeHandler}>\r\n          <div className={cls.content} onClick={onContentClick}>\r\n            {children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Portal>\r\n  );\r\n};\r\n"],"names":["level","skill","depth","thinkTime","AnalysisBoard","_ref","className","defaultPosition","game","useMemo","Chess","engineRef","useRef","chessBoardPosition","setChessBoardPosition","useState","fen","positionEvaluation","setPositionEvaluation","setDepth","bestLine","setBestline","possibleMate","setPossibleMate","boardOrientation","setBoardOrientation","useEffect","current","terminate","engine","Engine","config","setSkillLevel","setThinkTime","elo","setLimitStrength","threads","setThreads","multiPV","setMultiPV","findBestMove","handler","message","pv","turn","Number","async","addMessageListener","console","log","evaluatePosition","error","removeMessageListener","bestMove","isGameOverModal","setIsGameOverModal","onToggleModal","useCallback","_jsxs","classNames","cls","children","concat","toFixed","_jsx","slice","join","FenInput","fenPosition","onChange","valid","validate_fen","load","Chessboard","id","position","onPieceDrop","sourceSquare","targetSquare","piece","notEnd","moveObj","moved","move","game_over","in_draw","sounds","checkmateSound","play","in_check","checkSound","san","castlingSound","captured","captureSound","moveSound","from","to","promotion","toLowerCase","customBoardStyle","borderRadius","boxShadow","customArrows","substring","undefined","Button","theme","ButtonTheme","CLASSIC","onClick","reset","undo","Modal","isOpen","onClose","Audio","key","Object","keys","volume","Input","props","restProps","_objectWithoutProperties","_excluded","_objectSpread","value","e","target","placeholder","copy","navigator","clipboard","writeText","CLEAR","square","src","alt","constructor","stockfish","isInitialized","readyPromise","resolveReady","messageCallbacks","Set","_depth","_thinkTime","handleEngineMessage","data","msg","this","parseMessage","forEach","cb","Worker","Promise","resolve","initializeEngine","addEventListener","once","postMessage","waitForInitialReady","_data$match","_data$match2","match","ponder","cpMatch","mateMatch","depthMatch","pvMatch","uciMessage","parseInt","trim","split","callback","add","delete","stop","clear","then","time","n","limit","arguments","length","onReadyForNewGame","removeEventListener","goCommand","Portal","element","document","body","createPortal","isClosing","setIsClosing","timerRef","closeHandler","setTimeout","onKeyDown","window","clearTimeout","mods","stopPropagation"],"sourceRoot":""}
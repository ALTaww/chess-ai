{"version":3,"file":"static/js/490.bcf0403e.chunk.js","mappings":"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","sources":["shared/config/consts/urlParams.ts","shared/lib/sounds/sounds.ts","webpack://stockfish-web/./src/widgets/MyChessboard/ui/MyChessboard.module.scss?eb1e","app/stockfish/engine.ts","widgets/MyChessboard/ui/MyChessboard.tsx","pages/Play/ui/Play.tsx"],"sourcesContent":["export const urlParams = {\r\n  chessDefaultPosition: \"board-pos\",\r\n};\r\n","const volume = 0.2;\r\n\r\nexport const sounds = {\r\n  captureSound: new Audio(\"./sound/capture.mp3\"),\r\n  castlingSound: new Audio(\"./sound/castling.mp3\"),\r\n  checkSound: new Audio(\"./sound/check.mp3\"),\r\n  checkmateSound: new Audio(\"./sound/checkmate.mp3\"),\r\n  moveSound: new Audio(\"./sound/move.mp3\"),\r\n};\r\n\r\nfor (let key of Object.keys(sounds)) {\r\n  sounds[key].volume = volume;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"MyChessboard\":\"MyChessboard_MyChessboard__BjqC1\",\"chessboardWrapper\":\"MyChessboard_chessboardWrapper__AtQ+W\",\"buttons\":\"MyChessboard_buttons__Dfxko\"};","// documentation: https://official-stockfish.github.io/docs/stockfish-wiki/UCI-&-Commands.html\r\n\r\nconst MINIMUM_DEPTH = 1;\r\nconst MAXIMUM_DEPTH = 24;\r\n\r\ntype EngineMessage = {\r\n  /* исходное сообщение движка Stockfish */\r\n  uciMessage: string;\r\n  /* найден лучший ход для текущей позиции: e2e4 */\r\n  bestMove?: string;\r\n  /* ход «ponder» для противника: e7e5 */\r\n  ponder?: string;\r\n  /* оценка позиции (в пешечных единицах, ±cp/100) */\r\n  positionEvaluation?: number;\r\n  /* количество полуходов до мата, если найден мат */\r\n  possibleMate?: number;\r\n  /* строка с PV (последовательность ходов), разделёнными пробелами */\r\n  pv?: string[];\r\n  /* текущая глубина анализа */\r\n  depth?: number;\r\n};\r\n\r\nexport type EngineMessageCallback = (msg: EngineMessage) => void;\r\n\r\nexport default class Engine {\r\n  private stockfish: Worker;\r\n  private isInitialized = false;\r\n  private readyPromise: Promise<void>;\r\n  private resolveReady!: () => void;\r\n  private messageCallbacks = new Set<EngineMessageCallback>();\r\n  private _depth = 5;\r\n  private _thinkTime = 1000;\r\n\r\n  constructor() {\r\n    this.stockfish = new Worker(\"./stockfish.js\");\r\n    // создаём promise, который разрешится после получения первого 'readyok'\r\n    this.readyPromise = new Promise((resolve) => {\r\n      this.resolveReady = resolve;\r\n    });\r\n\r\n    this.initializeEngine();\r\n  }\r\n\r\n  /**\r\n   * Первый handshake с движком:\r\n   * 1) Отправляем 'uci'\r\n   * 2) Ждём 'readyok'\r\n   *\r\n   * После получения первого 'readyok' флаг this.isInitialized станет true,\r\n   * и resolveReady() разрешит все методы, ожидающие готовности движка.\r\n   */\r\n  private initializeEngine() {\r\n    this.stockfish.addEventListener(\"message\", this.handleEngineMessage, {\r\n      once: false,\r\n    });\r\n\r\n    // Запускаем UCI-режим\r\n    this.stockfish.postMessage(\"uci\");\r\n    // Спрашиваем, готов ли движок\r\n    this.stockfish.postMessage(\"isready\");\r\n  }\r\n\r\n  private handleEngineMessage = (e: MessageEvent) => {\r\n    const data: string = e.data;\r\n    // Логируем raw-сообщения (можно отключить в production)\r\n    console.log(\"[Engine →]\", data);\r\n\r\n    // Распарываем часть UCI-информации\r\n    const msg = this.parseMessage(data);\r\n    // Оповещаем всех внешних слушателей\r\n    this.messageCallbacks.forEach((cb) => cb(msg));\r\n\r\n    // Первый readyok после 'isready'\r\n    if (data === \"readyok\" && !this.isInitialized) {\r\n      this.isInitialized = true;\r\n      // Разрешаем този, кто ждёт initial ready\r\n      this.resolveReady();\r\n      console.log(\"ENGINE IS INITIALIZED AND READY!\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Ждём, пока движок не ответит первым 'readyok'.\r\n   * Все вызовы setOption…() будут ждать именно эту promise.\r\n   */\r\n  private async waitForInitialReady(): Promise<void> {\r\n    if (!this.isInitialized) {\r\n      await this.readyPromise;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Парсинг любого UCI-сообщения из движка в наш формат EngineMessage.\r\n   */\r\n  private parseMessage(data: string): EngineMessage {\r\n    const bestMove = data.match(/bestmove\\s+(\\S+)/)?.[1];\r\n    const ponder = data.match(/ponder\\s+(\\S+)/)?.[1];\r\n    const cpMatch = data.match(/score cp\\s+(-?\\d+)/);\r\n    const mateMatch = data.match(/score mate\\s+(-?\\d+)/);\r\n    const depthMatch = data.match(/info.*\\bdepth\\s+(\\d+)/);\r\n    const pvMatch = data.match(/info.*\\b pv\\s+(.+)/);\r\n\r\n    return {\r\n      uciMessage: data,\r\n      bestMove: bestMove || undefined,\r\n      ponder: ponder || undefined,\r\n      positionEvaluation: cpMatch ? parseInt(cpMatch[1], 10) / 100 : undefined,\r\n      possibleMate: mateMatch ? parseInt(mateMatch[1], 10) : undefined,\r\n      pv: pvMatch ? pvMatch[1].trim().split(/\\s+/) : undefined,\r\n      depth: depthMatch ? Number(depthMatch[1]) : undefined,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Добавляем внешнего слушателя — он будет получать каждый EngineMessage\r\n   */\r\n  addMessageListener(callback: EngineMessageCallback) {\r\n    this.messageCallbacks.add(callback);\r\n  }\r\n\r\n  removeMessageListener(callback: EngineMessageCallback) {\r\n    this.messageCallbacks.delete(callback);\r\n  }\r\n\r\n  /**\r\n   * Отправка команды «остановиться» (прерывает текущий поиск).\r\n   */\r\n  stop() {\r\n    this.stockfish.postMessage(\"stop\");\r\n  }\r\n\r\n  /**\r\n   * Полное завершение работы с движком:\r\n   * - Останавливаем все вычисления\r\n   * - Удаляем всех слушателей\r\n   * - Отправляем 'quit'\r\n   */\r\n  terminate() {\r\n    this.stop();\r\n    this.stockfish.postMessage(\"quit\");\r\n    this.messageCallbacks.clear();\r\n  }\r\n\r\n  /****************************\r\n   *   Методы установки опций  *\r\n   ****************************/\r\n\r\n  /**\r\n   * Устанавливает уровень навыка (Skill Level).\r\n   * Отложит команду, пока движок не станет ready впервые.\r\n   */\r\n  setSkillLevel(level: number) {\r\n    this.waitForInitialReady().then(() => {\r\n      this.stockfish.postMessage(`setoption name Skill Level value ${level}`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Устанавливает максимальную глубину поиска (UCI_option \"Depth\").\r\n   */\r\n  setDepth(depth: number) {\r\n    if (depth < MINIMUM_DEPTH) depth = MINIMUM_DEPTH;\r\n    else if (depth > MAXIMUM_DEPTH) depth = MAXIMUM_DEPTH;\r\n    this._depth = depth;\r\n\r\n    this.waitForInitialReady().then(() => {\r\n      this.stockfish.postMessage(`setoption name Depth value ${depth}`);\r\n    });\r\n    console.log(`Новая глубина поиска: ${this._depth}`);\r\n  }\r\n\r\n  /**\r\n   * Устанавливает «think time» — ограничение по времени (в миллисекундах).\r\n   * Само по себе значение не передаётся в setoption:\r\n   * мы будем использовать его в goCommand (или можно снять ограничение).\r\n   */\r\n  setThinkTime(time: number) {\r\n    this._thinkTime = time;\r\n    console.log(`Новое время на ход (миллисекунды): ${this._thinkTime}`);\r\n  }\r\n\r\n  /**\r\n   * Потоки, которые движок может использовать (UCI_option \"Threads\").\r\n   *\r\n   */\r\n  setThreads(threads: number) {\r\n    this.waitForInitialReady().then(() => {\r\n      this.stockfish.postMessage(`setoption name Threads value ${threads}`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Сколько вариантов (MultiPV) возвращать.\r\n   */\r\n  setMultiPV(n: number) {\r\n    this.waitForInitialReady().then(() => {\r\n      this.stockfish.postMessage(`setoption name MultiPV value ${n}`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Включает или отключает ограничение по рейтингу, и задаёт Elo.\r\n   * (UCI_option UCI_LimitStrength и UCI_Elo).\r\n   */\r\n  setLimitStrength(limit: boolean, elo = 1320) {\r\n    this.waitForInitialReady().then(() => {\r\n      this.stockfish.postMessage(\r\n        `setoption name UCI_LimitStrength value ${limit ? \"true\" : \"false\"}`\r\n      );\r\n      // Если limit=false, значение UCI_Elo всё равно «примется», но не будет влиять.\r\n      this.stockfish.postMessage(`setoption name UCI_Elo value ${elo}`);\r\n    });\r\n  }\r\n\r\n  /*********************************************\r\n   *    Основной метод: анализ позиции (go)     *\r\n   *********************************************/\r\n\r\n  /**\r\n   * Запрашивает от движка лучший ход для позиции FEN.\r\n   * Теперь каждый раз перед поиском мы:\r\n   *  1) Останавливаем предыдущий поиск (stop)\r\n   *  2) Посылаем 'ucinewgame', 'isready' → ждём нового 'readyok'\r\n   *  3) Устанавливаем позицию → «go depth N»\r\n   */\r\n  async evaluatePosition(fen: string) {\r\n    // Ждём, пока движок вообще инициализирован\r\n    await this.waitForInitialReady();\r\n\r\n    // 1) Прерываем предыдущий анализ (если он был)\r\n    this.stop();\r\n\r\n    // 2) Сбрасываем внутреннее состояние движка перед новым анализом\r\n    await new Promise<void>((resolve) => {\r\n      const onReadyForNewGame = (e: MessageEvent) => {\r\n        if (e.data === \"readyok\") {\r\n          this.stockfish.removeEventListener(\"message\", onReadyForNewGame);\r\n          resolve();\r\n        }\r\n      };\r\n      this.stockfish.addEventListener(\"message\", onReadyForNewGame);\r\n      this.stockfish.postMessage(\"ucinewgame\");\r\n      this.stockfish.postMessage(\"isready\");\r\n    });\r\n\r\n    // 3) Отправляем позицию\r\n    this.stockfish.postMessage(`position fen ${fen}`);\r\n\r\n    // 4) Формируем команду «go»\r\n    const goCommand = `go depth ${this._depth} movetime ${this._thinkTime}`;\r\n    console.log(`[Engine ←] ${goCommand}`);\r\n    this.stockfish.postMessage(goCommand);\r\n  }\r\n}\r\n","import { classNames } from \"shared/lib/classNames/classNames\";\r\nimport cls from \"./MyChessboard.module.scss\";\r\nimport { Button, ButtonTheme } from \"shared/ui/Button/Button\";\r\nimport { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport Engine, { EngineMessageCallback } from \"app/stockfish/engine\";\r\nimport Chess from \"chess.js\";\r\nimport { Chessboard } from \"react-chessboard\";\r\nimport { Piece, Square } from \"react-chessboard/dist/chessboard/types\";\r\nimport { sounds } from \"shared/lib/sounds/sounds\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { urlParams } from \"shared/config/consts/urlParams\";\r\n\r\ninterface MyChessboardProps {\r\n  className?: string;\r\n  defaultPosition?: string;\r\n}\r\n\r\ninterface LevelsConfig {\r\n  text: string;\r\n  skill: number;\r\n  depth: number;\r\n  thinkTime: number;\r\n  elo?: number;\r\n  multiPV?: number;\r\n  threads?: number; // лучше не использовать\r\n}\r\n\r\nconst levels: Record<string, LevelsConfig> = {\r\n  easy: {\r\n    text: \"Легко 🤓\",\r\n    skill: 2,\r\n    depth: 5,\r\n    thinkTime: 500,\r\n  },\r\n  normal: {\r\n    text: \"Нормально 🧐\",\r\n    skill: 10,\r\n    depth: 12,\r\n    thinkTime: 1000,\r\n  },\r\n  hard: {\r\n    text: \"Сложно 😵\",\r\n    skill: 20,\r\n    depth: 22,\r\n    thinkTime: 3000,\r\n  },\r\n};\r\n\r\nexport const MyChessboard = ({\r\n  className,\r\n  defaultPosition,\r\n}: MyChessboardProps) => {\r\n  const location = useLocation();\r\n  const params = useMemo(\r\n    () => new URLSearchParams(location.search),\r\n    [location.search]\r\n  );\r\n\r\n  const game = useMemo(() => new Chess(), []);\r\n\r\n  defaultPosition = useMemo(\r\n    () =>\r\n      defaultPosition ||\r\n      params.get(urlParams.chessDefaultPosition) ||\r\n      game.fen(),\r\n    [defaultPosition, params, game]\r\n  );\r\n\r\n  const engineRef = useRef<Engine | null>(null);\r\n  const [gamePosition, setGamePosition] = useState(\r\n    defaultPosition || params.get(urlParams.chessDefaultPosition) || game.fen()\r\n  );\r\n  const [stockfishLevel, setStockfishLevel] =\r\n    useState<keyof typeof levels>(\"easy\");\r\n\r\n  // При смене уровня создаём (или перенастраиваем) движок\r\n  useEffect(() => {\r\n    // Если старый engine существует, завершаем его\r\n    if (engineRef.current) {\r\n      engineRef.current.terminate();\r\n    }\r\n\r\n    const engine = new Engine();\r\n    engineRef.current = engine;\r\n\r\n    const config = levels[stockfishLevel];\r\n\r\n    // Сбрасываем лимит по рейтингу и настраиваем skill/depth/threads/multiPV\r\n    engine.setLimitStrength(false);\r\n    engine.setSkillLevel(config.skill);\r\n    engine.setDepth(config.depth);\r\n    engine.setThinkTime(config.thinkTime);\r\n\r\n    if (config.elo) {\r\n      engine.setLimitStrength(true, config.elo);\r\n    }\r\n\r\n    if (config.threads) {\r\n      engine.setThreads(config.threads);\r\n    }\r\n\r\n    if (config.multiPV) {\r\n      engine.setMultiPV(config.multiPV);\r\n    }\r\n\r\n    console.log(`Stockfish уровень: ${stockfishLevel}`, config);\r\n\r\n    return () => {\r\n      engine.terminate();\r\n      engineRef.current = null;\r\n    };\r\n  }, [stockfishLevel]);\r\n\r\n  // Загрузка начальной позиции в Chess.js\r\n  useEffect(() => {\r\n    game.load(defaultPosition);\r\n  }, [defaultPosition, game]);\r\n\r\n  function move(moveObj: {\r\n    from: string;\r\n    to: string;\r\n    promotion?: string;\r\n  }): boolean {\r\n    const moved = game.move(moveObj);\r\n    setGamePosition(game.fen());\r\n\r\n    if (moved === null) {\r\n      return false;\r\n    }\r\n    if (game.game_over() || game.in_draw()) {\r\n      sounds.checkmateSound.play();\r\n      return false;\r\n    }\r\n    if (game.in_check()) {\r\n      sounds.checkSound.play();\r\n      return true;\r\n    }\r\n    if (moved.san === \"O-O-O\" || moved.san === \"O-O\") {\r\n      sounds.castlingSound.play();\r\n      return true;\r\n    }\r\n    if (moved.captured) {\r\n      sounds.captureSound.play();\r\n      return true;\r\n    }\r\n    sounds.moveSound.play();\r\n    return true;\r\n  }\r\n\r\n  // Обработчик ответов от Engine\r\n  const handler: EngineMessageCallback = (message) => {\r\n    console.log(\"[React ← EngineMessage]\", message);\r\n\r\n    const engine = engineRef.current;\r\n    if (!engine) return;\r\n\r\n    if (message.bestMove) {\r\n      // Если есть лучший ход — сразу его выполняем\r\n      const selectedMove = message.bestMove;\r\n      const moveResult = move({\r\n        from: selectedMove.substring(0, 2),\r\n        to: selectedMove.substring(2, 4),\r\n        promotion:\r\n          selectedMove.length > 4 ? selectedMove.substring(4, 5) : undefined,\r\n      });\r\n\r\n      engine.removeMessageListener(handler);\r\n\r\n      if (!moveResult) {\r\n        engine.stop();\r\n      }\r\n    }\r\n  };\r\n\r\n  async function findBestMove() {\r\n    const engine = engineRef.current;\r\n    if (!engine) return;\r\n\r\n    // Добавляем слушатель перед новой оценкой\r\n    engine.addMessageListener(handler);\r\n    console.log(\"Запрос лучшего хода…\");\r\n\r\n    try {\r\n      await engine.evaluatePosition(game.fen());\r\n    } catch (error) {\r\n      engine.removeMessageListener(handler);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  function onDrop(sourceSquare: Square, targetSquare: Square, piece: Piece) {\r\n    console.log(`[Player move] ${sourceSquare} → ${targetSquare}`, piece);\r\n    const notEnd = move({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: piece[1].toLowerCase(),\r\n    });\r\n\r\n    if (notEnd) {\r\n      setTimeout(() => {\r\n        findBestMove();\r\n      }, 500);\r\n    }\r\n    return notEnd;\r\n  }\r\n\r\n  return (\r\n    <div className={classNames(cls.MyChessboard, {}, [className || \"\"])}>\r\n      <div className={cls.chessboardWrapper}>\r\n        <div className={cls.buttons}>\r\n          {Object.entries(levels).map(([level, config]) => (\r\n            <Button\r\n              key={level}\r\n              onClick={() => setStockfishLevel(level as keyof typeof levels)}\r\n              theme={ButtonTheme.CLASSIC}\r\n              active={stockfishLevel === level}\r\n            >\r\n              {config.text}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n\r\n        <Chessboard\r\n          id=\"PlayVsStockfish\"\r\n          position={gamePosition}\r\n          onPieceDrop={onDrop}\r\n        />\r\n\r\n        <div className={cls.buttons}>\r\n          <Button\r\n            onClick={() => {\r\n              game.reset();\r\n              setGamePosition(game.fen());\r\n            }}\r\n          >\r\n            Новая игра\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              game.undo();\r\n              game.undo();\r\n              setGamePosition(game.fen());\r\n            }}\r\n          >\r\n            Назад\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { MyChessboard } from \"widgets/MyChessboard\";\r\n\r\ninterface PlayProps {\r\n  className?: string;\r\n}\r\n\r\nconst Play = ({ className }: PlayProps) => {\r\n  return (\r\n    <div>\r\n      <MyChessboard />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Play;\r\n"],"names":["urlParams","chessDefaultPosition","sounds","captureSound","Audio","castlingSound","checkSound","checkmateSound","moveSound","key","Object","keys","volume","Engine","constructor","stockfish","isInitialized","readyPromise","resolveReady","messageCallbacks","Set","_depth","_thinkTime","handleEngineMessage","e","data","console","log","msg","this","parseMessage","forEach","cb","Worker","Promise","resolve","initializeEngine","addEventListener","once","postMessage","waitForInitialReady","_data$match","_data$match2","bestMove","match","ponder","cpMatch","mateMatch","depthMatch","pvMatch","uciMessage","undefined","positionEvaluation","parseInt","possibleMate","pv","trim","split","depth","Number","addMessageListener","callback","add","removeMessageListener","delete","stop","terminate","clear","setSkillLevel","level","then","concat","setDepth","setThinkTime","time","setThreads","threads","setMultiPV","n","setLimitStrength","limit","elo","arguments","length","evaluatePosition","fen","onReadyForNewGame","removeEventListener","goCommand","levels","easy","text","skill","thinkTime","normal","hard","MyChessboard","_ref","className","defaultPosition","location","useLocation","params","useMemo","URLSearchParams","search","game","Chess","get","engineRef","useRef","gamePosition","setGamePosition","useState","stockfishLevel","setStockfishLevel","move","moveObj","moved","game_over","in_draw","play","in_check","san","captured","useEffect","current","engine","config","multiPV","load","handler","message","selectedMove","moveResult","from","substring","to","promotion","_jsx","classNames","cls","children","_jsxs","entries","map","_ref2","Button","onClick","theme","ButtonTheme","CLASSIC","active","Chessboard","id","position","onPieceDrop","sourceSquare","targetSquare","piece","notEnd","toLowerCase","setTimeout","async","error","findBestMove","reset","undo"],"sourceRoot":""}